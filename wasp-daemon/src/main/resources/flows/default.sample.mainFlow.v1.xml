<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:batch="http://www.springframework.org/schema/batch"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch.xsd">

		
	<!-- define sample main flow -->
	<batch:flow id="wasp.default.sample.mainFlow.v1">
		<batch:split id="wasp.sample.waitUntilActionable" task-executor="taskExecutor">
			<!-- We need to wait for the sample to be received and for the job to be approved before working on the sample -->
			<batch:flow>
				<batch:step id="wasp.sample.step.listenForSampleReceived">
					<!-- Listen for sample CREATED message: tells us sample is physically received -->
					<batch:tasklet>
						<bean class="edu.yu.einstein.wasp.daemon.batch.tasklets.ListenForStatusTasklet" scope="step">
							<constructor-arg name="inputSubscribableChannel" ref="wasp.channel.notification.sample" />
							<constructor-arg name="abortMonitoringChannel" ref="wasp.channel.notification.abort"/>
							<constructor-arg name="messageTemplate">
								<bean class="edu.yu.einstein.wasp.integration.messages.SampleStatusMessageTemplate" >
									<constructor-arg name="sampleId" value="#{jobParameters[waspJobParameters.SAMPLE_ID]}" />
									<property name="status" value="CREATED" />
								</bean>
							</constructor-arg>
							<property name="name" value="wasp.sample.step.listenForSampleReceived" />
						</bean>
					</batch:tasklet>
				</batch:step>
			</batch:flow>
			<batch:flow>
				<batch:step id="wasp.sample.step.listenForJobApproved">
					<!-- Listen for job ACCEPTED message: tells us job is approved -->
					<batch:tasklet>
						<bean class="edu.yu.einstein.wasp.daemon.batch.tasklets.ListenForStatusTasklet" scope="step">
							<constructor-arg name="inputSubscribableChannel" ref="wasp.channel.notification.job" />
							<constructor-arg name="abortMonitoringChannel" ref="wasp.channel.notification.abort"/>
							<constructor-arg name="messageTemplate">
								<bean class="edu.yu.einstein.wasp.integration.messages.JobStatusMessageTemplate" >
									<constructor-arg name="jobId" value="#{jobParameters[waspJobParameters.JOB_ID]}" />
									<property name="status" value="ACCEPTED" />
								</bean>
							</constructor-arg>
							<property name="name" value="wasp.sample.step.listenForJobApproved" />
						</bean>
					</batch:tasklet>
				</batch:step>
			</batch:flow>
			<batch:next on="FAILED" to="wasp.sample.step.notifySampleAbandoned" />
			<batch:next on="COMPLETED" to="wasp.sample.step.sampleQC" />
			<batch:fail on="*" /> <!-- unexpected message -->
		</batch:split>
		<batch:step id="wasp.sample.step.sampleQC">
			<!-- Wait for QC result to be notified. If failed abandon this sample flow otherwise sample ready -->
			<!-- for library making -->
			<batch:tasklet>
				<bean class="edu.yu.einstein.wasp.daemon.batch.tasklets.ListenForStatusTasklet" scope="step">
					<constructor-arg name="inputSubscribableChannel" ref="wasp.channel.notification.sample" />
					<constructor-arg name="abortMonitoringChannel" ref="wasp.channel.notification.abort"/>
					<constructor-arg name="messageTemplate">
						<bean class="edu.yu.einstein.wasp.integration.messages.SampleStatusMessageTemplate">
							<constructor-arg name="sampleId" value="#{jobParameters[waspJobParameters.SAMPLE_ID]}" />
							<property name="task" value="#{sampleTasks.QC}" />
							<property name="status" value="COMPLETED" />
						</bean>
					</constructor-arg>
					<property name="name" value="wasp.sample.step.sampleQC" />
				</bean>
			</batch:tasklet>
			<batch:next on="FAILED" to="wasp.sample.step.notifySampleAbandoned" />
			<batch:next on="COMPLETED" to="wasp.sample.step.notifySampleAccepted" />
			<batch:fail on="*" /> <!-- unexpected message -->
		</batch:step>
		<batch:step id="wasp.sample.step.notifySampleAccepted">
			<!-- publish that sample is ready for further processing -->
			<batch:tasklet>
				<bean class="edu.yu.einstein.wasp.daemon.batch.tasklets.NotifyStatusTasklet" scope="step">
					<constructor-arg name="outputMessageChannel" ref="wasp.channel.batch" />
					<constructor-arg name="messageTemplate">
						<bean class="edu.yu.einstein.wasp.integration.messages.SampleStatusMessageTemplate">
							<constructor-arg  name="sampleId" value="#{jobParameters[waspJobParameters.SAMPLE_ID]}"/>
							<property name="status" value="ACCEPTED" />
						</bean>
					</constructor-arg>
				</bean>
			</batch:tasklet>
		</batch:step>
		<batch:step id="wasp.sample.step.notifySampleAbandoned">
			<!-- publish that sample had been abandoned  -->
			<batch:tasklet>
				<bean class="edu.yu.einstein.wasp.daemon.batch.tasklets.NotifyStatusTasklet" scope="step">
					<constructor-arg name="outputMessageChannel" ref="wasp.channel.batch" />
					<constructor-arg name="messageTemplate">
						<bean class="edu.yu.einstein.wasp.integration.messages.SampleStatusMessageTemplate">
							<constructor-arg  name="sampleId" value="#{jobParameters[waspJobParameters.SAMPLE_ID]}"/>
							<property name="status" value="ABANDONED" />
						</bean>
					</constructor-arg>
				</bean>
			</batch:tasklet>
		</batch:step>
	</batch:flow>
	
	<batch:flow id="wasp.default.sample.mainFlow.exitCondition">
		<!-- Will listen for indicators that the flow should terminate such as the wasp job flow has been aborted or -->
		<!-- if the wasp.default.sample.mainFlow flow completes (broadcasting an ACCEPTED status message) or is aborted -->
		<!-- e.g. via a message from the web layer -->
		<batch:step id="wasp.sample.step.listenForExitCondition">
			<batch:tasklet>
				<bean class="edu.yu.einstein.wasp.daemon.batch.tasklets.ListenForExitConditionTasklet" scope="step">
					<constructor-arg name="inputSubscribableChannels">
						<set>
							<ref bean="wasp.channel.notification.sample" />
							<ref bean="wasp.channel.notification.job" />
						</set>
					</constructor-arg>
					<constructor-arg name="abortMonitoringChannel" ref="wasp.channel.notification.abort" />
					<constructor-arg name="messageTemplates">
						<set>
							<bean class="edu.yu.einstein.wasp.integration.messages.SampleStatusMessageTemplate">
								<constructor-arg name="sampleId" value="#{jobParameters[waspJobParameters.SAMPLE_ID]}"/>
								<property name="status" value="ACCEPTED" />
							</bean>
							<bean class="edu.yu.einstein.wasp.integration.messages.JobStatusMessageTemplate">
								<constructor-arg name="jobId" value="#{jobParameters[waspJobParameters.JOB_ID]}"/>
								<property name="status" value="COMPLETED" />
							</bean>
						</set>
					</constructor-arg>
				</bean>	
			</batch:tasklet>
		</batch:step>
	</batch:flow>
	
	<!-- for dispatching job, call with parameter 'sampleId' and 'jobId' -->
	<batch:job id="wasp.sample.jobflow.v1" restartable="true">
		<batch:split id="wasp.sample.jobFlow.split" task-executor="taskExecutor">
			<batch:flow parent="wasp.default.sample.mainFlow.v1" />
			<batch:flow parent="wasp.default.sample.mainFlow.exitCondition" />
		</batch:split>
	</batch:job>
	
</beans>
