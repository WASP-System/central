<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:batch="http://www.springframework.org/schema/batch"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch.xsd">
		
	<!-- for job, call with parameter 'runID' -->
	<batch:job id="waspIlluminaPersonal.jobFlow">
		<batch:step id="waspIlluminaPersonal.mainFlow.notifyIlluminaStart" next="waspIlluminaPersonal.mainFlow.listenForRunStart">
			<batch:tasklet>
				<bean class="edu.yu.einstein.wasp.daemon.batch.tasklets.NotifyStatusTasklet" scope="step">
					<constructor-arg name="outputMessageChannel" ref="wasp.channel.batch" />
					<constructor-arg name="messageTemplate">
						<bean class="edu.yu.einstein.wasp.integration.messages.templates.RunStatusMessageTemplate">
							<constructor-arg name="runId" value="#{jobParameters[waspJobParameters.RUN_ID]}" />
							<property name="status" value="STARTED" />
						</bean>
					</constructor-arg>
				</bean>
			</batch:tasklet>
		</batch:step>
		<batch:step id="waspIlluminaPersonal.mainFlow.listenForRunStart" next="waspIlluminaPersonal.mainFlow.listenForRunCompletion">
			<!-- look for evidence of a started illumina run. One of the first steps is to write the runParameters.xml file -->
			<batch:tasklet>
				<bean class="edu.yu.einstein.wasp.plugin.illumina.batch.tasklet.IlluminaExternalFileExists" parent="baseIlluminaTasklet" scope="step">
					<constructor-arg name="softwarePackage" ref="casava" />
					<constructor-arg name="resourceCategoryIName" value="#{jobParameters[waspJobParameters.RUN_RESOURCE_CATEGORY_INAME]}" />
					<constructor-arg name="filename" value="#{jobParameters[waspJobParameters.RUN_NAME]}/runParameters.xml" />
				</bean>
			</batch:tasklet>
		</batch:step>
		<batch:step id="waspIlluminaPersonal.mainFlow.listenForRunCompletion" next="waspIlluminaPersonal.mainFlow.updateRunCompleted">
			<!-- look for evidence of a completed illumina run. At the moment, we look for "RTAComplete.txt" (not present in MiSeq) -->
			<batch:tasklet>
				<bean class="edu.yu.einstein.wasp.plugin.illumina.batch.tasklet.IlluminaExternalFileExists" parent="baseIlluminaTasklet" scope="step">
					<constructor-arg name="softwarePackage" ref="casava" />
					<constructor-arg name="resourceCategoryIName" value="#{jobParameters[waspJobParameters.RUN_RESOURCE_CATEGORY_INAME]}" />
					<constructor-arg name="filename" value="#{jobParameters[waspJobParameters.RUN_NAME]}/RTAComplete.txt" />
				</bean>
			</batch:tasklet>
		</batch:step>
		<batch:step id="waspIlluminaPersonal.mainFlow.updateRunCompleted" next="waspIlluminaPersonal.mainFlow.createSampleSheet">
			<!-- next="waspIlluminaPersonal.mainFlow.dualIndexSplit">  -->
			<!-- task to create a sample sheet. Should do some rudimentary checking on samples. -->
			<batch:tasklet>
				<bean class="edu.yu.einstein.wasp.plugin.illumina.batch.tasklet.UpdateRunCompletedTasklet" parent="baseIlluminaTasklet" scope="step">
					<constructor-arg name="runId" value="#{jobParameters[waspJobParameters.RUN_ID]}" />
				</bean>
			</batch:tasklet>
		</batch:step>
		
		
		<batch:step id="waspIlluminaPersonal.mainFlow.createSampleSheet" next="waspIlluminaPersonal.mainFlow.startIlluminaPipeline">
			<!-- task to create a sample sheet. Should do some rudimentary checking on samples. -->
			<batch:tasklet>
				<bean class="edu.yu.einstein.wasp.plugin.illumina.batch.tasklet.SampleSheetTasklet" parent="baseIlluminaTasklet" scope="step">
					<constructor-arg name="runId" value="#{jobParameters[waspJobParameters.RUN_ID]}" />
					<constructor-arg name="method" value="#{T(edu.yu.einstein.wasp.plugin.illumina.IlluminaIndexingStrategy).TRUSEQ}" />
				</bean>
			</batch:tasklet>
		</batch:step>
		<batch:step id="waspIlluminaPersonal.mainFlow.startIlluminaPipeline" next="waspIlluminaPersonal.mainFlow.barcodeStats">
			<!-- initiate the illumina pipeline -->
			<batch:tasklet>
				<bean class="edu.yu.einstein.wasp.plugin.illumina.batch.tasklet.PipelineTasklet" parent="baseIlluminaTasklet" scope="step">
					<constructor-arg name="runId" value="#{jobParameters[waspJobParameters.RUN_ID]}" />
					<constructor-arg name="resourceCategoryIName" value="#{jobParameters[waspJobParameters.RUN_RESOURCE_CATEGORY_INAME]}" />
					<constructor-arg name="method" value="#{T(edu.yu.einstein.wasp.plugin.illumina.IlluminaIndexingStrategy).TRUSEQ}" />
				</bean>
			</batch:tasklet>
		</batch:step>
		
		<batch:step id="waspIlluminaPersonal.mainFlow.barcodeStats" next="waspIlluminaPersonal.mainFlow.processSAV">
			<batch:tasklet>
				<bean class="edu.yu.einstein.wasp.daemon.batch.tasklets.LaunchJobAndContinueTasklet" scope="step">
					<constructor-arg name="flowName" value="picard.extractIlluminaBarcodes" />
					<constructor-arg name="jobParameters">
						<map>
							<entry key="runId" value="#{jobParameters[waspJobParameters.RUN_ID]}" />
						</map>
					</constructor-arg>
				</bean>
			</batch:tasklet>
		</batch:step>
		
		<batch:step id="waspIlluminaPersonal.mainFlow.processSAV" next="waspIlluminaPersonal.mainFlow.stageResults">
			<!-- generate QC metrics pictures a la Illumina reports -->
			<batch:tasklet>
				<batch:transaction-attributes propagation="NEVER"/>
				<bean class="edu.yu.einstein.wasp.plugin.illumina.batch.tasklet.ProcessSAVTasklet" parent="baseIlluminaTasklet" scope="step">
					<constructor-arg name="runId" value="#{jobParameters[waspJobParameters.RUN_ID]}" />
					<constructor-arg name="resourceCategoryIName" value="#{jobParameters[waspJobParameters.RUN_RESOURCE_CATEGORY_INAME]}" />
				</bean>
			</batch:tasklet>
		
		</batch:step>
		<batch:step id="waspIlluminaPersonal.mainFlow.stageResults" next="waspIlluminaPersonal.mainFlow.registerFiles">
			<batch:tasklet>
				<bean class="edu.yu.einstein.wasp.plugin.illumina.batch.tasklet.StageResultsTasklet" parent="baseIlluminaTasklet" scope="step">
					<constructor-arg name="runId" value="#{jobParameters[waspJobParameters.RUN_ID]}" />
					<constructor-arg name="resourceCategoryIName" value="#{jobParameters[waspJobParameters.RUN_RESOURCE_CATEGORY_INAME]}" />
				</bean>
			</batch:tasklet>
		</batch:step>
		<batch:step id="waspIlluminaPersonal.mainFlow.registerFiles" next="waspIlluminaPersonal.mainFlow.demultiplex">
			<batch:tasklet>
				<bean class="edu.yu.einstein.wasp.plugin.illumina.batch.tasklet.RegisterFilesTasklet" parent="baseIlluminaTasklet" scope="step">
					<constructor-arg name="runId" value="#{jobParameters[waspJobParameters.RUN_ID]}" />
				</bean>
			</batch:tasklet>
		</batch:step>
		<batch:step id="waspIlluminaPersonal.mainFlow.demultiplex" next="waspIlluminaPersonal.mainFlow.listenForQCCompletion">
			 <!--  task to perform 5' demultiplexing, currently skipping --> 
			<batch:tasklet ref="waspIlluminaPersonal.mainFlow.skipTasklet" />
		</batch:step>
		
		<batch:step id="waspIlluminaPersonal.mainFlow.listenForQCCompletion" next="waspIlluminaPersonal.mainFlow.trim">
			<batch:tasklet>
				<bean class="edu.yu.einstein.wasp.daemon.batch.tasklets.ListenForStatusTasklet" parent="baseIlluminaTasklet" scope="step">
					<constructor-arg name="messageTemplate">
						<bean class="edu.yu.einstein.wasp.integration.messages.templates.RunStatusMessageTemplate">
							<constructor-arg name="runId" value="#{jobParameters[waspJobParameters.RUN_ID]}" />
							<property name="task" value="#{runTasks.QC}" />
							<property name="status" value="COMPLETED" />
						</bean>
					</constructor-arg>
				</bean>
			</batch:tasklet>
		</batch:step>
		
		<batch:step id="waspIlluminaPersonal.mainFlow.trim" next="waspIlluminaPersonal.mainFlow.listenForTrimCompletion">
			<batch:tasklet>
				<bean class="edu.yu.einstein.wasp.daemon.batch.tasklets.analysis.SimpleFlowLaunchTasklet" scope="step">
					<constructor-arg name="flowName" value="#{T(edu.yu.einstein.wasp.plugin.babraham.software.TrimGalore).FLOW_NAME}" />
					<property name="jobParameters">
						<map key-type="java.lang.String">
							<entry key="runId" value="#{jobParameters[waspJobParameters.RUN_ID]}" />
							<entry key="#{T(edu.yu.einstein.wasp.integration.messages.WaspJobParameters).BEAN_NAME}" value="casava" />
						</map>
					</property>
				</bean>
			</batch:tasklet>
		</batch:step>
		
		<batch:step id="waspIlluminaPersonal.mainFlow.listenForTrimCompletion">
			<batch:tasklet>
				<bean class="edu.yu.einstein.wasp.daemon.batch.tasklets.ListenForStatusTasklet" parent="baseIlluminaTasklet" scope="step">
					<constructor-arg name="messageTemplates">
						<list>
							<bean class="edu.yu.einstein.wasp.plugin.babraham.integration.messages.BabrahamStatusMessageTemplate">
								<constructor-arg name="id" value="#{jobParameters[waspJobParameters.RUN_ID]}" />
								<property name="task" value="#{babrahamBatchJobTask.TRIM_GALORE}" />
								<property name="status" value="COMPLETED" />
							</bean>
							<bean class="edu.yu.einstein.wasp.plugin.babraham.integration.messages.BabrahamStatusMessageTemplate">
								<constructor-arg name="id" value="#{jobParameters[waspJobParameters.RUN_ID]}" />
								<property name="task" value="#{babrahamBatchJobTask.TRIM_GALORE}" />
								<property name="status" value="FAILED" />
							</bean>
						</list>
					</constructor-arg>
					<property name="failOnStatuses" value="FAILED" />
				</bean>
			</batch:tasklet>
			<batch:fail on="FAILED" />
			<batch:next on="*" to="waspIlluminaPersonal.mainFlow.notifyRunComplete" />
		</batch:step>
		
		<batch:step id="waspIlluminaPersonal.mainFlow.notifyRunComplete">
			<batch:tasklet>
				<bean class="edu.yu.einstein.wasp.daemon.batch.tasklets.NotifyStatusTasklet" scope="step">
					<constructor-arg name="outputMessageChannel" ref="wasp.channel.batch" />
					<constructor-arg name="messageTemplate">
						<bean class="edu.yu.einstein.wasp.integration.messages.templates.RunStatusMessageTemplate">
							<constructor-arg name="runId" value="#{jobParameters[waspJobParameters.RUN_ID]}" />
							<property name="status" value="COMPLETED" />
						</bean>
					</constructor-arg>
				</bean>
			</batch:tasklet>
		</batch:step>
	</batch:job>
	
	<bean id="waspIlluminaPersonal.mainFlow.skipTasklet" class="edu.yu.einstein.wasp.daemon.batch.tasklets.SkipTasklet" scope="step" />
	
</beans>
