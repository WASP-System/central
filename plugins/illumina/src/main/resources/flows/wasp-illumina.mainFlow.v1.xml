<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:batch="http://www.springframework.org/schema/batch"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch.xsd">

	<!-- taskExecutor needs to be externalized and generalized -->
	<bean id="taskExecutor" class="org.springframework.core.task.SimpleAsyncTaskExecutor" />

	<!-- for job, call with parameter 'puId' -->
	<batch:flow id="illumina.mainFlow.v1">
		<batch:step id="illumina.mainFlow.waitForClosePU" next="illumina.mainFlow.listenForRunStart">
			<!-- tasklet class: WaitForClosePUTasklet -->
		</batch:step>


		<batch:step id="illumina.mainFlow.listenForRunStart" next="illumina.mainFlow.listenForRunCompletion">
			<!-- Tasklet: wait for run flow folder creation -->
			<!-- listens for message that indicates that the flow has begun -->
			<!-- handles message indicating that PU is aborted -->
		</batch:step>
		<batch:step id="illumina.mainFlow.listenForRunCompletion" next="illumina.mainFlow.listenForQCCompletion">
			<!-- Tasklet: wait for message indicating that the sequencing run has completed -->
			<!-- handles run abort message -->
		</batch:step>
		<batch:step id="illumina.mainFlow.listenForQCCompletion" next="illumina.mainFlow.createSampleSheet">
			<!-- Tasklet: wait for message indicating that QC has been completed -->
			<!-- handles run abort message -->
		</batch:step>
		<batch:step id="illumina.mainFlow.createSampleSheet" next="illumina.mainFlow.startIllumiunaPipeline">
			<!-- Tasklet: create a sample sheet -->
		</batch:step>
		<batch:step id="illumina.mainFlow.startIllumiunaPipeline" next="illumina.mainFlow.listenPipelineCompletion">
			<!-- Tasklet: initiate the illumina pipeline on the local grid -->
			<!-- retryable (5 attempts) -->
		</batch:step>
		<batch:step id="illumina.mainFlow.listenPipelineCompletion" next="illumina.mainFlow.demultiplex">
			<!-- Tasklet: wait for completion of the Illumina pipeline -->
		</batch:step>
		<batch:split id="illumina.mainFlow.demultiplex"	task-executor="taskExecutor" next="illumina.mainFlow.stageResults">
			<batch:flow>
				<batch:step id="illumina.mainFlow.demultiplexTruSeq">
					<!-- Tasklet: initiate illumina demultiplexing task -->
				</batch:step>
			</batch:flow>
			<batch:flow>
				<batch:step id="illumina.mainFlow.demultiplexFivePrime">
					<!-- Tasklet: initiate five prime demultiplexing -->
				</batch:step>
			</batch:flow>
		</batch:split>
		<batch:step id="illumina.mainFlow.stageResults">
			<!-- copy FASTQ and platform specific files to final destination -->
			<!-- send  -->
		</batch:step>
	</batch:flow>


</beans>
