<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:batch="http://www.springframework.org/schema/batch"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch.xsd">
		
	<bean id="baseIlluminaTasklet" abstract="true">
		<!-- Sets indicators to listen for that instruct the flow should terminate such as if the wasp job flow has been aborted or -->
		<!-- if the flow completes (broadcasting an COMPLETED status message) or is aborted e.g. via a message from the web layer -->
		<property name="abandonMessages">
			<set>
				<bean class="edu.yu.einstein.wasp.integration.messages.templates.RunStatusMessageTemplate">
					<constructor-arg name="runId" value="#{jobParameters[waspJobParameters.RUN_ID]}" />
					<property name="status" value="COMPLETED" />
				</bean>
				<bean class="edu.yu.einstein.wasp.integration.messages.templates.RunStatusMessageTemplate">
					<constructor-arg name="runId" value="#{jobParameters[waspJobParameters.RUN_ID]}" />
					<property name="status" value="ABANDONED" />
				</bean>
				<bean class="edu.yu.einstein.wasp.integration.messages.templates.RunStatusMessageTemplate">
					<constructor-arg name="runId" value="#{jobParameters[waspJobParameters.RUN_ID]}" />
					<property name="status" value="FAILED" />
				</bean>
			</set>
		</property>	
	</bean>
	
	<!-- for job, call with parameter 'runID' -->
	<batch:job id="waspIlluminaHiSeq.jobFlow">
		<batch:step id="waspIlluminaHiSeq.mainFlow.notifyIlluminaStart" next="waspIlluminaHiSeq.mainFlow.listenForRunStart">
			<batch:tasklet>
				<bean class="edu.yu.einstein.wasp.daemon.batch.tasklets.NotifyStatusTasklet" scope="step">
					<constructor-arg name="outputMessageChannel" ref="wasp.channel.batch" />
					<constructor-arg name="messageTemplate">
						<bean class="edu.yu.einstein.wasp.integration.messages.templates.RunStatusMessageTemplate">
							<constructor-arg name="runId" value="#{jobParameters[waspJobParameters.RUN_ID]}" />
							<property name="status" value="STARTED" />
						</bean>
					</constructor-arg>
				</bean>
			</batch:tasklet>
		</batch:step>
		<batch:step id="waspIlluminaHiSeq.mainFlow.listenForRunStart" next="waspIlluminaHiSeq.mainFlow.listenForRunCompletion">
			<!-- look for evidence of a started illumina run. One of the first steps is to write the runParameters.xml file -->
			<batch:tasklet>
				<bean class="edu.yu.einstein.wasp.daemon.batch.tasklets.file.ExternalFileExistsTasklet" parent="baseIlluminaTasklet" scope="step">
					<constructor-arg name="softwarePackage" ref="casava" />
					<constructor-arg name="directoryId" value="illumina.data.dir" />
					<constructor-arg name="filename" value="#{jobParameters[waspJobParameters.RUN_NAME]}/runParameters.xml" />
				</bean>
			</batch:tasklet>
		</batch:step>
		<batch:step id="waspIlluminaHiSeq.mainFlow.listenForRunCompletion" next="waspIlluminaHiSeq.mainFlow.updateRunCompleted">
			<!-- look for evidence of a completed illumina run. At the moment, we look for "RTAComplete.txt" (not present in MiSeq) -->
			<batch:tasklet>
				<bean class="edu.yu.einstein.wasp.daemon.batch.tasklets.file.ExternalFileExistsTasklet" parent="baseIlluminaTasklet" scope="step">
					<constructor-arg name="softwarePackage" ref="casava" />
					<constructor-arg name="directoryId" value="illumina.data.dir" />
					<constructor-arg name="filename" value="#{jobParameters[waspJobParameters.RUN_NAME]}/RTAComplete.txt" />
				</bean>
			</batch:tasklet>
		</batch:step>
		<batch:step id="waspIlluminaHiSeq.mainFlow.updateRunCompleted" next="waspIlluminaHiSeq.mainFlow.dualIndexSplit">
			<!-- task to create a sample sheet. Should do some rudimentary checking on samples. -->
			<batch:tasklet>
				<bean class="edu.yu.einstein.wasp.plugin.illumina.batch.tasklet.UpdateRunCompletedTasklet" parent="baseIlluminaTasklet" scope="step">
					<constructor-arg name="runId" value="#{jobParameters[waspJobParameters.RUN_ID]}" />
				</bean>
			</batch:tasklet>
		</batch:step>
		<batch:split id="waspIlluminaHiSeq.mainFlow.dualIndexSplit" next="waspIlluminaHiSeq.mainFlow.processSAV">
		<!--  processing of illumina runs proceeds in a split step since single index reads and dual index
				reads require separate runs of the CASAVA pipeline.  Under no circumstances should single
				index reads and dual index reads be run in the same flowcell lane.   -->
		<batch:flow>
		<batch:step id="waspIlluminaHiSeq.mainFlow.createSampleSheet" next="waspIlluminaHiSeq.mainFlow.startIlluminaPipeline">
			<!-- task to create a sample sheet. Should do some rudimentary checking on samples. -->
			<batch:tasklet>
				<bean class="edu.yu.einstein.wasp.plugin.illumina.batch.tasklet.SampleSheetTasklet" parent="baseIlluminaTasklet" scope="step">
					<constructor-arg name="runId" value="#{jobParameters[waspJobParameters.RUN_ID]}" />
					<constructor-arg name="method" value="#{T(edu.yu.einstein.wasp.plugin.illumina.software.IlluminaHiseqSequenceRunProcessor$IndexType).SINGLE}" />
				</bean>
			</batch:tasklet>
		</batch:step>
		<batch:step id="waspIlluminaHiSeq.mainFlow.startIlluminaPipeline">
			<!-- initiate the illumina pipeline -->
			<batch:tasklet>
				<bean class="edu.yu.einstein.wasp.plugin.illumina.batch.tasklet.PipelineTasklet" parent="baseIlluminaTasklet" scope="step">
					<constructor-arg name="runId" value="#{jobParameters[waspJobParameters.RUN_ID]}" />
					<constructor-arg name="method" value="#{T(edu.yu.einstein.wasp.plugin.illumina.software.IlluminaHiseqSequenceRunProcessor$IndexType).SINGLE}" />
				</bean>
			</batch:tasklet>
		</batch:step>
		</batch:flow>
		<batch:flow>
		<batch:step id="waspIlluminaHiSeq.mainFlow.createSampleSheetDual" next="waspIlluminaHiSeq.mainFlow.startIlluminaPipelineDual">
			<!-- task to create a sample sheet. Should do some rudimentary checking on samples. -->
			<batch:tasklet>
						<batch:transaction-attributes propagation="NEVER"/>
				<bean class="edu.yu.einstein.wasp.plugin.illumina.batch.tasklet.SampleSheetTasklet" scope="step">
					<constructor-arg name="runId" value="#{jobParameters[waspJobParameters.RUN_ID]}" />
					<constructor-arg name="method" value="#{T(edu.yu.einstein.wasp.plugin.illumina.software.IlluminaHiseqSequenceRunProcessor$IndexType).DUAL}" />
				</bean>
			</batch:tasklet>
		</batch:step>
		<batch:step id="waspIlluminaHiSeq.mainFlow.startIlluminaPipelineDual">
			<!-- initiate the illumina pipeline -->
			<batch:tasklet>
						<batch:transaction-attributes propagation="NEVER"/>
				<bean class="edu.yu.einstein.wasp.plugin.illumina.batch.tasklet.PipelineTasklet" scope="step">
					<constructor-arg name="runId" value="#{jobParameters[waspJobParameters.RUN_ID]}" />
					<constructor-arg name="method" value="#{T(edu.yu.einstein.wasp.plugin.illumina.software.IlluminaHiseqSequenceRunProcessor$IndexType).DUAL}" />
				</bean>
			</batch:tasklet>
		</batch:step>
		</batch:flow>
		</batch:split>
		<batch:step id="waspIlluminaHiSeq.mainFlow.processSAV" next="waspIlluminaHiSeq.mainFlow.stageResults">
			<!-- generate QC metrics pictures a la Illumina reports -->
			<batch:tasklet>
				<batch:transaction-attributes propagation="NEVER"/>
				<bean class="edu.yu.einstein.wasp.plugin.illumina.batch.tasklet.ProcessSAVTasklet" parent="baseIlluminaTasklet" scope="step">
					<constructor-arg name="runId" value="#{jobParameters[waspJobParameters.RUN_ID]}" />
				</bean>
			</batch:tasklet>
		
		</batch:step>
		<batch:step id="waspIlluminaHiSeq.mainFlow.stageResults" next="waspIlluminaHiSeq.mainFlow.registerFiles">
			<batch:tasklet>
				<bean class="edu.yu.einstein.wasp.plugin.illumina.batch.tasklet.StageResultsTasklet" parent="baseIlluminaTasklet" scope="step">
					<constructor-arg name="runId" value="#{jobParameters[waspJobParameters.RUN_ID]}" />
				</bean>
			</batch:tasklet>
		</batch:step>
		<batch:step id="waspIlluminaHiSeq.mainFlow.registerFiles" next="waspIlluminaHiSeq.mainFlow.demultiplex">
			<batch:tasklet>
				<bean class="edu.yu.einstein.wasp.plugin.illumina.batch.tasklet.RegisterFilesTasklet" parent="baseIlluminaTasklet" scope="step">
					<constructor-arg name="runId" value="#{jobParameters[waspJobParameters.RUN_ID]}" />
				</bean>
			</batch:tasklet>
		</batch:step>
		<batch:step id="waspIlluminaHiSeq.mainFlow.demultiplex" next="waspIlluminaHiSeq.mainFlow.listenForQCCompletion">
			 <!--  task to perform 5' demultiplexing, currently skipping --> 
			<batch:tasklet ref="waspIlluminaHiSeq.mainFlow.skipTasklet" />
		</batch:step>
		
		<batch:step id="waspIlluminaHiSeq.mainFlow.listenForQCCompletion" next="waspIlluminaHiSeq.mainFlow.trim">
			<batch:tasklet>
				<bean class="edu.yu.einstein.wasp.daemon.batch.tasklets.ListenForStatusTasklet" parent="baseIlluminaTasklet" scope="step">
					<constructor-arg name="messageTemplate">
						<bean class="edu.yu.einstein.wasp.integration.messages.templates.RunStatusMessageTemplate">
							<constructor-arg name="runId" value="#{jobParameters[waspJobParameters.RUN_ID]}" />
							<property name="task" value="#{runTasks.QC}" />
							<property name="status" value="COMPLETED" />
						</bean>
					</constructor-arg>
				</bean>
			</batch:tasklet>
		</batch:step>
		
		<batch:step id="waspIlluminaHiSeq.mainFlow.trim" next="waspIlluminaHiSeq.mainFlow.listenForTrimCompletion">
			<batch:tasklet>
				<bean class="edu.yu.einstein.wasp.daemon.batch.tasklets.analysis.SimpleFlowLaunchTasklet" scope="step">
					<constructor-arg name="flowName" value="${trim_galore.FLOW_NAME}" />
					<property name="jobParameters">
						<map key-type="java.lang.String">
							<entry key="runId" value="#{jobParameters[waspJobParameters.RUN_ID]}" />
						</map>
					</property>
				</bean>
			</batch:tasklet>
		</batch:step>
		
		<batch:step id="waspIlluminaHiSeq.mainFlow.listenForTrimCompletion">
			<batch:tasklet>
				<bean class="edu.yu.einstein.wasp.daemon.batch.tasklets.ListenForStatusTasklet" parent="baseIlluminaTasklet" scope="step">
					<constructor-arg name="messageTemplates">
						<list>
							<bean class="edu.yu.einstein.wasp.plugin.babraham.integration.messages.BabrahamStatusMessageTemplate">
								<constructor-arg name="id" value="#{jobParameters[waspJobParameters.RUN_ID]}" />
								<property name="task" value="#{babrahamBatchJobTask.TRIM_GALORE}" />
								<property name="status" value="COMPLETED" />
							</bean>
							<bean class="edu.yu.einstein.wasp.plugin.babraham.integration.messages.BabrahamStatusMessageTemplate">
								<constructor-arg name="id" value="#{jobParameters[waspJobParameters.RUN_ID]}" />
								<property name="task" value="#{babrahamBatchJobTask.TRIM_GALORE}" />
								<property name="status" value="FAILED" />
							</bean>
						</list>
					</constructor-arg>
				</bean>
			</batch:tasklet>
			<batch:fail on="FAILED" exit-code="TRIM_FAILED"/>
			<batch:next on="*" to="waspIlluminaHiSeq.mainFlow.notifyRunComplete" />
		</batch:step>
		
		<batch:step id="waspIlluminaHiSeq.mainFlow.notifyRunComplete">
			<batch:tasklet>
				<bean class="edu.yu.einstein.wasp.daemon.batch.tasklets.NotifyStatusTasklet" scope="step">
					<constructor-arg name="outputMessageChannel" ref="wasp.channel.batch" />
					<constructor-arg name="messageTemplate">
						<bean class="edu.yu.einstein.wasp.integration.messages.templates.RunStatusMessageTemplate">
							<constructor-arg name="runId" value="#{jobParameters[waspJobParameters.RUN_ID]}" />
							<property name="status" value="COMPLETED" />
						</bean>
					</constructor-arg>
				</bean>
			</batch:tasklet>
		</batch:step>
	</batch:job>

	<bean id="waspIlluminaHiSeq.mainFlow.skipTasklet" class="edu.yu.einstein.wasp.daemon.batch.tasklets.SkipTasklet" scope="step" />

</beans>
