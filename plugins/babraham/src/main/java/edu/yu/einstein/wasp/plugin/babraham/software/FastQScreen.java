/**
 * 
 */
package edu.yu.einstein.wasp.plugin.babraham.software;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Random;

import org.springframework.beans.factory.annotation.Autowired;

import edu.yu.einstein.wasp.filetype.FastqComparator;
import edu.yu.einstein.wasp.filetype.service.FastqService;
import edu.yu.einstein.wasp.grid.work.GridResult;
import edu.yu.einstein.wasp.grid.work.WorkUnit;
import edu.yu.einstein.wasp.grid.work.WorkUnit.ExecutionMode;
import edu.yu.einstein.wasp.grid.work.WorkUnit.ProcessMode;
import edu.yu.einstein.wasp.model.FileGroup;
import edu.yu.einstein.wasp.model.FileHandle;
import edu.yu.einstein.wasp.mps.illumina.IlluminaSequenceRunProcessor;
import edu.yu.einstein.wasp.software.SoftwarePackage;

/**
 * @author calder
 *
 */
public class FastQScreen extends SoftwarePackage {

	@Autowired
	private FastqService fastqService;
	
	@Autowired
	private IlluminaSequenceRunProcessor casava;

	/**
	 * 
	 */
	private static final long serialVersionUID = -2863597794926320890L;

	/**
	 * Don't use the whole sequence file to search when preforming fastq_screen; instead create a temporary dataset of size subset
	 */
	private static final long subset = 500000L;
	
	/**
	 * 
	 */
	public FastQScreen() {
		// TODO Auto-generated constructor stub
	}

	/** 
	 * {@inheritDoc}
	 */
	@Override
	public String getSoftwareVersion() {
		// TODO Auto-generated method stub
		return null;
	}

	/** 
	 * {@inheritDoc}
	 */
	@Override
	public void setSoftwareVersion(String softwareVersion) {
		// TODO Auto-generated method stub
		
	}

	public WorkUnit getFastQScreen(FileGroup fileGroup) {
		WorkUnit w = new WorkUnit();
		
		// require fastqc
		List<SoftwarePackage> software = new ArrayList<SoftwarePackage>();
		software.add(this);
		w.setSoftwareDependencies(software);
		
		// require 1GB memory
		w.setMemoryRequirements(1);
		
		// require a single thread, execution mode PROCESS
		// indicates this is a vanilla exectuion.
		w.setProcessMode(ProcessMode.SINGLE);
		w.setMode(ExecutionMode.PROCESS);
		
		// set working directory to scratch
		w.setWorkingDirectory(WorkUnit.SCRATCH_DIR_PLACEHOLDER);
		
		// we aren't actually going to retain any files, so we will set the output
		// directory to the scratch directory.  Also set "secure results" to
		// false to indicate that we don't care about the output.
		w.setResultsDirectory(WorkUnit.SCRATCH_DIR_PLACEHOLDER);
		w.setSecureResults(false);
		
		// add the files to the work unit
		// files will be represented as bash variables in the work unit and
		// are sorted using the FastqComparator.  For single samples (what we have here)
		// this ensures that they will be in groups of read segments.
		// e.g.
		// s1.R1.001
		// s1.R2.001
		// s1.R1.002
		// s1.R2.002
		//we'll just use the forward reads for fastq_screen
		List<FileHandle> files = getUpToFiveRandomForwardReadFiles(fileGroup); 
		Collections.sort(files, new FastqComparator(fastqService));
		w.setRequiredFiles(files);
		
		// set the command
		w.setCommand(getCommand(fileGroup));
		
		return w;
	}
	
	/**
	 * Get up to five, randomly selected, forward-read fastq files from the fastq files in fileGroup
	 * (if file group contains < 5, return all files
	 * 
	 * @param fileGroup
	 * @return List<FileHandle>
	 * 
	 */
	private List<FileHandle> getUpToFiveRandomForwardReadFiles(FileGroup fileGroup){
		
		List<FileHandle> allFastqFiles = new ArrayList<FileHandle>(fileGroup.getFileHandles());
		List<FileHandle> forwardReadFastqFiles = new ArrayList<FileHandle>();
		for(FileHandle fh : allFastqFiles){
			if(fastqService.getFastqReadSegmentNumber(fh)==1){//forward read
				forwardReadFastqFiles.add(fh);
			}
		}
		if(forwardReadFastqFiles.size()<=5){
			return forwardReadFastqFiles;			
		}
		
		List<FileHandle> fiveRandomForwardReadFastqFiles = new ArrayList<FileHandle>();
		Random randomNumberGenerator = new Random(System.currentTimeMillis());
		while(fiveRandomForwardReadFastqFiles.size()<5){
			int randomInt = randomNumberGenerator.nextInt(forwardReadFastqFiles.size());
			if(fiveRandomForwardReadFastqFiles.contains(forwardReadFastqFiles.get(randomInt))){
				continue;
			}
			else{
				fiveRandomForwardReadFastqFiles.add(forwardReadFastqFiles.get(randomInt));
			}
		}		
		Collections.sort(fiveRandomForwardReadFastqFiles, new FastqComparator(fastqService));//this comparator appears to order files like: a read (R1_001.fq), followed immediately by its mate (R2_001.fq),  if it was a paired end read. This is exactly what fastq_screen requires.
		return fiveRandomForwardReadFastqFiles;		
	}	
	
	/**
	 * Set the fastqscreen command.  Choose casava mode if the data was generated by the Illumina plugin.
	 * 
	 * @param fileGroup
	 * @return String
	 */
	private String getCommand(FileGroup fileGroup) {
		
		String command = "";

		String opts = "--quiet --subset " + subset;
		if (fileGroup.getSoftwareGeneratedBy().equals(casava)) { //Assume quality values encoded in Illumina v1.3 format (without flag --illumina1_3, fastq_screen assumes quality values are in Sanger format)
			opts += " --illumina1_3";
		}
		command = "";
		command += "mkdir 1\n";
		command += "zcat ${"+ WorkUnit.INPUT_FILE +"[@]} > 0.fq && fastq_screen " + opts + " --outdir 0 0.fq\n";
		
		return command;
	}
	public String parseOutput(GridResult result) {
		return null;
	}
}
