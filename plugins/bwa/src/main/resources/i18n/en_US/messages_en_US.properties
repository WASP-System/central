# plugin messages for en_US go here

# bwa aln/sampe
aligner.bwa.aln_n.label=Maximum edit distance/fraction of missing alignments. (aln -n)
aligner.bwa.aln_n.error=A value for max edit distance must be specified
aligner.bwa.aln_n.tt=Maximum edit distance if the value is INT, or the fraction of missing alignments given 2% uniform base error rate if FLOAT. In the latter case, the maximum edit distance is automatically chosen for different read lengths. [0.04]
aligner.bwa.aln_o.label=Maximum number of gap openings. (aln -o)
aligner.bwa.aln_o.error=A value for gap openings must be specified
aligner.bwa.aln_o.tt=Maximum number of gap opens [1]
aligner.bwa.aln_e.label=Maximum number of gap extensions. (aln -e)
aligner.bwa.aln_e.error=A value for max number of gap extensions must be specified
aligner.bwa.aln_e.tt=Maximum number of gap extensions, -1 for k-difference mode (disallowing long gaps) [-1]
aligner.bwa.aln_d.label=Disallow long deletion within INT bp of 3' end. (aln -d)
aligner.bwa.aln_d.error=A value for the disallow long deletion must be specified
aligner.bwa.aln_d.tt=Disallow a long deletion within INT bp towards the 3\u2019-end [16]
aligner.bwa.aln_i.label=Disallow an indel within INT bp of end. (aln -i)
aligner.bwa.aln_i.error=A value for the disallow indel must be specified
aligner.bwa.aln_i.tt=Disallow an indel within INT bp towards the ends [5]
aligner.bwa.aln_l.label=Take the first INT subsequence as seed. -1 for infinity. (aln -l)
aligner.bwa.aln_l.error=A value for the seed must be specified
aligner.bwa.aln_l.tt=Take the first INT subsequence as seed. If INT is larger than the query sequence, seeding will be disabled. For long reads, this option is typically ranged from 25 to 35 for \u2018-k 2\u2019. [32]
aligner.bwa.aln_k.label=Maximum edit distance in the seed (aln -k)
aligner.bwa.aln_k.error=A value for the seed edit distance must be specified
aligner.bwa.aln_k.tt=Maximum edit distance in the seed [2]
aligner.bwa.aln_M.label=Mismatch penalty. (aln -M)
aligner.bwa.aln_M.error=A value for the mismatch penalty must be specified
aligner.bwa.aln_M.tt=Mismatch penalty. BWA will not search for suboptimal hits with a score lower than (bestScore-misMsc). [3]
aligner.bwa.aln_O.label=Gap open penalty (aln -O)
aligner.bwa.aln_O.error=A value for the gap open penalty must be specified
aligner.bwa.aln_O.tt=Gap open penalty [11]
aligner.bwa.aln_E.label=Gap extension penalty (aln -E)
aligner.bwa.aln_E.error=A value for the gap extension penalty must be specified
aligner.bwa.aln_E.tt=Gap extension penalty [4]
aligner.bwa.aln_R.label=Proceed with suboptimal alignments if there are no more than INT equally best hits. (aln -R)
aligner.bwa.aln_R.error=A value for the suboptimal alignments must be specified
aligner.bwa.aln_R.tt=Proceed with suboptimal alignments if there are no more than INT equally best hits. This option only affects paired-end mapping. Increasing this threshold helps to improve the pairing accuracy at the cost of speed, especially for short reads (~32bp). [30]
aligner.bwa.aln_N.label=Disable iterative search, yes=SLOW (aln -N)
aligner.bwa.aln_N.control=select:yes:yes;no:no
aligner.bwa.aln_N.error=A value for disable iterative search must be specified
aligner.bwa.aln_N.tt=Disable iterative search. All hits with no more than maxDiff differences will be found. This mode is much slower than the default. [no]
aligner.bwa.aln_q.label=Parameter for read trimming. (aln -q)
aligner.bwa.aln_q.error=A value for read trimming must be specified
aligner.bwa.aln_q.tt=Parameter for read trimming. BWA trims a read down to argmax_x{sum_{i=x+1}^l(INT-q_i)} if q_l&lt;INT where l is the original read length. [0]
aligner.bwa.sampe_a.label=Maximum insert size. Not used in single end alignments. (sampe -a)
aligner.bwa.sampe_a.error=A value for max insert size must be specified
aligner.bwa.sampe_a.tt=Maximum insert size for a read pair to be considered being mapped properly. Since 0.4.5, this option is only used when there are not enough good alignment to infer the distribution of insert sizes. [500]
aligner.bwa.sampe_o.label=Maximum occurrences of a read for pairing. Not used in single end alignments. (sampe -o)
aligner.bwa.sampe_o.error=A value for max occurences must be specified
aligner.bwa.sampe_o.tt=Maximum occurrences of a read for pairing. A read with more occurrences will be treated as a single-end read. Reducing this parameter helps faster pairing. [100000]
aligner.bwa.sampe_n.label=Maximum number of alignments to output in the XA tag for reads paired properly. (samse/sampe -n)
aligner.bwa.sampe_n.error=A value for max insert size must be specified
aligner.bwa.sampe_n.tt=Maximum number of alignments to output in the XA tag for reads paired properly. If a read has more than INT hits, the XA tag will not be written. [3]
aligner.bwa.sampe_N.label=Maximum number of alignments to output in the XA tag for reads paired properly. Not used in single end alignments. (sampe -N)
aligner.bwa.sampe_N.error=A value for max insert size must be specified
aligner.bwa.sampe_N.tt=Maximum number of alignments to output in the XA tag for disconcordant read pairs (excluding singletons). If a read has more than INT hits, the XA tag will not be written. [10]

# bwa mem
aligner.bwa.mem_k.label=Minimum seed length. (mem -k)
aligner.bwa.mem_k.error=A value for the minimum seed length must be specified
aligner.bwa.mem_k.tt=Matches shorter than INT will be missed. The alignment speed is usually insensitive to this value unless it significantly deviates 20. [19]
aligner.bwa.mem_w.label=Band width. (mem -w)
aligner.bwa.mem_w.error=A value for bandwidth must be specified
aligner.bwa.mem_w.tt=Essentially, gaps longer than INT will not be found. Note that the maximum gap length is also affected by the scoring matrix and the hit length, not solely determined by this option. [100]
aligner.bwa.mem_d.label=Off-diagonal X-dropoff (Z-dropoff). (mem -d)
aligner.bwa.mem_d.error=A value for the off-diagonal X-dropoff must be specified
aligner.bwa.mem_d.tt=Stop extension when the difference between the best and the current extension score is above |i-j|*A+INT, where i and j are the current positions of the query and reference, respectively, and A is the matching score. Z-dropoff is similar to BLAST\u2019s X-dropoff except that it doesn't penalize gaps in one of the sequences in the alignment. Z-dropoff not only avoids unnecessary extension, but also reduces poor alignments inside a long good alignment. [100] 
aligner.bwa.mem_r.label=Trigger re-seeding for a MEM longer than minSeedLen*FLOAT. (mem -r)
aligner.bwa.mem_r.error=A value must be specified
aligner.bwa.mem_r.tt=This is a key heuristic parameter for tuning the performance. Larger value yields fewer seeds, which leads to faster alignment speed but lower accuracy. [1.5] 
aligner.bwa.mem_c.label=Discard a MEM if it has more than INT occurences in the genome. (mem -c)
aligner.bwa.mem_c.error=A value must be specified
aligner.bwa.mem_c.tt=This is an insensitive parameter. [10000] 
aligner.bwa.mem_P.label=Rescue missing hits not in a proper pair (paired end mode only). (mem -P)
aligner.bwa.mem_P.control=select:yes:yes;no:no
aligner.bwa.mem_P.error=A value must be specified
aligner.bwa.mem_P.tt=In the paired-end mode, perform SW to rescue missing hits only but do not try to find hits that fit a proper pair. [no]
aligner.bwa.mem_A.label=Matching score. (mem -A)
aligner.bwa.mem_A.error=A value for matching score must be specified
aligner.bwa.mem_A.tt=Matching score [1]
aligner.bwa.mem_B.label=Mismatch penalty. (mem -B)
aligner.bwa.mem_B.error=A value for mismatch penalty must be specified
aligner.bwa.mem_B.tt=The sequence error rate is approximately: {.75 * exp[-log(4) * B/A]}. [4] 
aligner.bwa.mem_O.label=Gap open penalty. (mem -O)
aligner.bwa.mem_O.error=A value for the gap open penalty must be specified
aligner.bwa.mem_O.tt=Gap open penalty [6]
aligner.bwa.mem_E.label=Gap extension penalty. (mem -E)
aligner.bwa.mem_E.error=A value for the gap extension penalty must be specified
aligner.bwa.mem_E.tt=A gap of length k costs O + k*E (i.e. -O is for opening a zero-length gap). [1] 
aligner.bwa.mem_L.label=Clipping penalty. (mem -L)
aligner.bwa.mem_L.error=A value for the clipping penalty must be specified
aligner.bwa.mem_L.tt=When performing SW extension, BWA-MEM keeps track of the best score reaching the end of query. If this score is larger than the best SW score minus the clipping penalty, clipping will not be applied. Note that in this case, the SAM AS tag reports the best SW score; clipping penalty is not deducted. [5]
aligner.bwa.mem_U.label=Penalty for an unpaired read pair. (mem -U)
aligner.bwa.mem_U.error=A value for the unpaired read pair penalty must be specified
aligner.bwa.mem_U.tt=BWA-MEM scores an unpaired read pair as scoreRead1+scoreRead2-INT and scores a paired as scoreRead1+scoreRead2-insertPenalty. It compares these two scores to determine whether we should force pairing. [9] 
aligner.bwa.mem_p.label=Assume the first input query file is interleaved paired-end FASTA/Q. (mem -p)
aligner.bwa.mem_p.control=select:yes:yes;no:no
aligner.bwa.mem_p.error=A value must be specified
aligner.bwa.mem_p.tt=Assume the first input query file is interleaved paired-end FASTA/Q. [no]
aligner.bwa.mem_R.label=Complete read group header line. (mem -R)
aligner.bwa.mem_R.error=A value for the header line must be specified
aligner.bwa.mem_R.tt=\u2019\t\u2019 can be used in STR and will be converted to a TAB in the output SAM. The read group ID will be attached to every read in the output. An example is \u2019@RG\tID:foo\tSM:bar\u2019. [null] 
aligner.bwa.mem_T.label=Don't output alignment with score lower than INT. (mem -T)
aligner.bwa.mem_T.error=A value must be specified
aligner.bwa.mem_T.tt=This option only affects output. [30] 
aligner.bwa.mem_a.label=Output all found alignments for single-end or unpaired paired-end reads. (mem -a)
aligner.bwa.mem_a.control=select:yes:yes;no:no
aligner.bwa.mem_a.error=A value must be specified
aligner.bwa.mem_a.tt=These alignments will be flagged as secondary alignments. [no]
aligner.bwa.mem_C.label=Append append FASTA/Q comment to SAM output. (mem -C)
aligner.bwa.mem_C.control=select:yes:yes;no:no
aligner.bwa.mem_C.error=A value must be specified
aligner.bwa.mem_C.tt=This option can be used to transfer read meta information (e.g. barcode) to the SAM output. Note that the FASTA/Q comment (the string after a space in the header line) must conform the SAM spec (e.g. BC:Z:CGTAC). Malformated comments lead to incorrect SAM output. [no]
aligner.bwa.mem_H.label=Use hard clipping \u2019H\u2019 in the SAM output. (mem -H)
aligner.bwa.mem_H.control=select:yes:yes;no:no
aligner.bwa.mem_H.error=A value must be specified
aligner.bwa.mem_H.tt=This option may dramatically reduce the redundancy of output when mapping long contig or BAC sequences. [no]
aligner.bwa.mem_M.label=Mark shorter split hits as secondary. (mem -M)
aligner.bwa.mem_M.control=select:yes:yes;no:no
aligner.bwa.mem_M.error=A value must be specified
aligner.bwa.mem_M.tt=This option is for Picard compatibility. [yes]
