<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns5="http://www.w3.org/2000/svg"
         xmlns:ns4="http://www.w3.org/1998/Math/MathML"
         xmlns:ns3="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">

	<title>Installation</title>
	<para>
		What you need to get WASP installed.
	</para>
	<section>
		<title>Getting the WASP System Source Code from GitHub</title>
		<para>
			Make sure you have Git on your server (obtain from <ulink url="http://git-scm.com">http://git-scm.com</ulink>) and obtain the latest WASP System code from <ulink url='https://github.com/WASP-System'>https://github.com/WASP-System</ulink>.
			<important><para>Please make sure you understand the importance of line endings in Git and adjust your setting accordingly: <ulink url="http://help.github.com/articles/dealing-with-line-endings">http://help.github.com/articles/dealing-with-line-endings</ulink></para></important>
			We provide a script to help clone and install the main components to speed up the installation process (see the Installing, Building and Deploying WASP section below).
		</para>
		<para>
			After cloning the WASP System source code, you’ll notice the project contains many folders. Most of these represent modules of the system, wrapped up into individual Maven projects:
			<informaltable frame='none'>
				<tgroup cols='2'>
					<tbody>
						<row><entry>db</entry><entry>Contains database initialization files</entry></row>
						<row><entry>wasp-parent</entry><entry>Hosts a parent.pom that defines common dependencies and versions required by other components. Maven Project.</entry></row>
						<row><entry>wasp-web</entry><entry>The WASP System webapp. Maven/Spring project. Builds a war file for Tomcat7 deployment.</entry></row>
						<row><entry>wasp-file</entry><entry>File download webapp for delivering files to users.  Maven/Spring project. Builds a war file for Tomcat7 deployment.</entry></row>
						<row><entry>wasp-core</entry><entry>Spring component containing core code. Maven/Spring project. Builds a jar.</entry></row>
						<row><entry>wasp-cli</entry><entry>Used to run wasp analysis jobs from the command line. Maven/Spring project. Builds a jar.</entry></row>
						<row><entry>wasp-config</entry><entry>local configuration e.g. database and email sever details etc. Maven/Spring project. Builds a jar.</entry></row>
						<row><entry>wasp-daemon</entry><entry>Spring component that runs WASP System task management flows and pipeline flows.</entry></row>
						<row><entry>wasp-exec</entry><entry>Builds a jar to execute the wasp-daemon component. Maven/Spring project. </entry></row>
						<row><entry>wasp-plugin</entry><entry>Contains a .pom file that serves as a parent for .pom files in all plugin projects. Maven project.</entry></row>
						<row><entry>wasp-interface</entry><entry>location for interfaces used across projects. Maven/Spring project. Builds a jar</entry></row>
						<row><entry>wasp-tomcat-classloader</entry><entry>Extends WebappClassLoader to allow loading of classes from the waspPlugins folder in the Tomcat base folder. Maven project. Builds a jar</entry></row>
						<row><entry>wasp-doc</entry><entry>This DocBooks documentation. Builds documentation</entry></row>
					</tbody>
				</tgroup>
			</informaltable>
		</para>
	</section>
	<section>
		<title>Setting up the Server (Linux)</title>
		<orderedlist numeration="arabic">
			<listitem>
				<para>Download the latest versions of  the following software packages and install according to the provider’s instructions:</para>
				<para>
					<itemizedlist>
						<listitem><para><application>Apache Tomcat7</application> (<ulink url='http://tomcat.apache.org'>http://tomcat.apache.org</ulink>)</para></listitem>
						<listitem><para><application>Apache Maven3</application>(<ulink url='http://maven.apache.org'>http://maven.apache.org</ulink>)</para></listitem>
						<listitem><para><application>Apache Ant</application> (<ulink url='http://ant.apache.org'>http://ant.apache.org</ulink>)</para></listitem>
						<listitem><para><application>Oracle Java SE 6</application> (<ulink url='http://www.oracle.com'>http://www.oracle.com</ulink>)</para></listitem>
						<listitem><para><application>MySQL Community Server</application> (<ulink url='http://www.mysql.com/downloads/mysql'>http://www.mysql.com/downloads/mysql</ulink>)</para></listitem>
					</itemizedlist>
				</para>
			</listitem>
			<listitem>
				<para>Add environment variables to your user profile and set the values to the paths of the installations above:</para>
				<para>
					<itemizedlist>
						<listitem><para><envar>ANT_HOME</envar></para></listitem>
						<listitem><para><envar>JAVA_HOME</envar></para></listitem>
						<listitem><para><envar>CATALINA_HOME</envar></para></listitem>
						<listitem><para><envar>MAVEN_HOME</envar></para></listitem>
					</itemizedlist>
				</para>
				<para>Then set the PATH environment variable to point to the relevant binaries.</para>
				
				<programlisting>PATH=$JAVA_HOME/bin:$ANT_HOME/bin:$MAVEN_HOME/bin:$PATH</programlisting>
				
				<para>E.g. in a typical Linux setup using bash, your <filename>.bashrc</filename> file should contain something similar to this:</para>
				<programlisting>
export ANT_HOME=/opt/ant
export JAVA_HOME=/usr/java/latest
export CATALINA_HOME=/usr/local/tomcat/tomcat/current
export WASP_HOME=$HOME/waspSystem
export MAVEN_HOME=/opt/maven/current
export PATH=$JAVA_HOME/bin:$ANT_HOME/bin:$MAVEN_HOME/bin:$PATH
				</programlisting>
			</listitem>
		</orderedlist>
	</section>
	<section>
		<title>Tomcat 7 setup</title>
		<orderedlist numeration="arabic">
			<listitem>
				<para>Using your favorite editor, create a new file in folder <filename>$CATALINA_HOME/bin</filename> called
				<filename>setenv.sh</filename>, and put the following text into it and save:</para>
				<programlisting>
CATALINA_HOME="/usr/local/tomcat/tomcat"
JAVA_OPTS="-Xms128m -Xmx512m -XX:PermSize=128m -XX:MaxPermSize=512m"
JAVA_HOME="/usr/java/latest"
				</programlisting>
			</listitem>
			<listitem>
				<para>Open <filename>$CATALINA_HOME/conf/tomcat-users.xml</filename> using your favorite editor and add the
				following (replacing placeholders ‘myGuiPass’ and ‘myScriptPass’ with your own choice of
				passwords):</para>
				<programlisting><![CDATA[
</tomcat-users>
	<role rolename="manager-gui"/>
	<user username="tomcat" password="myGuiPass" roles="manager-gui"/>
	<role rolename="manager-script"/>
	<user username="tomcat-script" password="myScriptPass" roles="manager-script"/>
</tomcat-users>
				]]></programlisting>
				<para>The <quote>manager-script</quote> account is used to deploy The WASP System using Maven. The <quote>managergui</quote>
				account can be used to manage your tomcat installation at <systemitem class="systemname">http://localhost:8080/manager.</systemitem>
				To deploy wasp using Maven, the following complementary information about the server needs
				to be added to your local maven configuration as follows:</para>
				<para>From within your home folder, open the <filename>.m2/settings.xml</filename> file and locate the <literal><![CDATA[<server></server>]]></literal>
				tags. In between these tags place the following (replacing placeholder <quote>myScriptPass</quote> with the
				same password you used above for the <quote>tomcat-script</quote> account):</para>
				<programlisting><![CDATA[
<server>
	<id>tomcat-localhost</id>
	<username>tomcat-script</username>
	<password>myScriptPass</password>
</server>
				]]></programlisting>
			</listitem>
			<listitem>
			<para>Create the folder:</para>
			<programlisting>
$CATALINA_HOME/waspPlugins
			</programlisting>
			<para>Ensure that their permissions are set such that Maven can copy files into the waspPlugins
			folder.</para>
		</listitem>
		<listitem>
		<para>To create a startup launch daemon:</para>
		<orderedlist numeration='lowerroman'>
			<listitem>
				<para>Type the following at the command line:</para>
				<programlisting>
$ cd $CATALINA_HOME/bin
$ tar xvfz commons-daemon-native.tar.gz
$ cd commons-daemon-1.0.x-native-src/unix
$ ./configure
$ make
$ cp jsvc ../..
				</programlisting>
			</listitem>
			<listitem><para>
				Using your favorite editor and sudo, copy the contents of the file 
				<ulink url="../scripts/tomcat7-init.d.sh">tomcat7-init.d.sh</ulink> to the location:
				<filename>/etc/init.d/tomcat7</filename>.
				<important><para>Replace the values of the variables under <quote># local
				config section</quote> at the top with values relevant to your setup</para></important>
			</para>
				</listitem>
				<listitem><para>At the command line run: <userinput>$ chkconfig --add tomcat7</userinput></para></listitem>
				<listitem><para>At the command line run <userinput>$ sudo /etc/init.d/tomcat7 start</userinput> to start tomcat. You should see a welcome page at 
				<systemitem class="systemname">http://localhost:8080</systemitem> if all went well.</para></listitem>
			</orderedlist>
		</listitem>
	</orderedlist>
	</section>
	<section>
	<title>Installing, Building and Deploying WASP</title>
	<orderedlist numeration='arabic'>
		<listitem><para>There are three main component types comprising the Wasp System as detailed below: 
		<orderedlist numeration='lowerroman'>
			<listitem><para>The wasp-web Webapp is deployed on Tomcat and represents the graphial UI for the system. It is part of the central git project</para></listitem> 
			<listitem><para>The wasp-damon  is an independent software component which leverages Spring Integration and Spring Batch to control task flows and analysis flows. 
			It responds to messages (via RMI) from the web interface and command line interface (CLI). It maintains its own state and starts up from where it left off after 
			shutdown (or failure) and restart. This component is also part of the central git project</para></listitem>
			<listitem><para>Plugins are individual git versioned projects that, when built and placed int the 'waspPlugins' folder under the tomcat home folder, are weaved into the system. 
			They extend the web and/or daemon components to add new functionality.</para></listitem>
		</orderedlist>
		</para></listitem>
		<listitem><para>The fastet way to get going is to download and run the <ulink url="../scripts/setupWasp.sh">setupWasp.sh</ulink> bash script. It clones and installs select projects hosted 
		on the wasp-system GitHub repository <ulink url='https://github.com/WASP-System'>https://github.com/WASP-System</ulink>. If you run again later it updates the installation for you taking the lates changes from GitHub.
		First it installs the central project into a git managed folder called 'wasp', deploys the webapp then clones select plugin projects.  Before running the script, 
		you must uncomment and set the <envar>WASP_HOME</envar> and <envar>CATALINA_HOME</envar> variables at the top of the script if they are 
		not already set in your environment. You may also wish to uncomment out the lines to shutdown and restart the wasp-daemon application.</para></listitem>
		<listitem><para>After installation is complete, take a look at the <filename>$WASP_HOME/wasp-plugins/wasp-config/src/main/resources</filename> folder. This is where most custom
		properties can be set including the database settings.</para></listitem>
		<listitem><para>Initialize the wasp database by running the following at the command line (remember to edit the database settings in the scripts first if they have been changed in the config):</para>
			<programlisting><![CDATA[
$ mysql -uroot -p < $WASP_HOME/wasp/db/InitializeWaspDb.sql
$ mysql -uroot -p wasp < $WASP_HOME/wasp/db/createSpringBatchTables.sql
			]]></programlisting>
		</listitem>
		<listitem><para>Post Installation checks:</para>
			<orderedlist numeration='lowerroman'>
				<listitem>
					<para>Check to see that <filename>wasp-tomcat-classloader-x.x.x-SNAPSHOT.jar</filename> has been copied into the
					<filename>$CATALINA_HOME/lib</filename> folder. If not (due to a permissions issue) you should do this manually:
					<userinput>$ sudo cp $WASP_HOME/wasp/wasp-tomcat-classloader/target/wasp-tomcat-classloader-?.?.?-SNAPSHOT.jar $CATALINA_HOME/lib</userinput></para>
				</listitem>
				<listitem><para>Verify the installed plugins by navigating to <filename>$CATALINA_HOME/waspPlugins</filename>. Plugins should have been installed here. If 
				old versions of plugins persist these must be deleted as only one version of each plugin can be present in this folder.</para>
				</listitem>
				<listitem><para>Verify that the wasp system webapp was started by navigating to <systemitem class="systemname">localhost:8080/wasp</systemitem> in 
				a local web browser. If you see the login page you have set up the webapp properly. On a Linux system you could also use command-line tool lynx to do this: 
				<userinput>$ lynx http://localhost:8080/wasp</userinput></para></listitem>
				<listitem><para>If not already performed by the setupWasp script, you may start up the wasp-daemon executable component (task management) in a new shell as follows:</para>
					<programlisting><![CDATA[
		$ cd $WASP_HOME/wasp/wasp-exec
		$ java -Xms128m -Xmx256m -XX:PermSize=128m -XX:MaxPermSize=256m -Dcatalina.home=$CATALINA_HOME \
		    -cp "target/wasp-exec-0.1.0-SNAPSHOT.jar:$CATALINA_HOME/waspPlugins/*" edu.yu.einstein.wasp.daemon.StartDaemon
					]]></programlisting>
					<para>To run it in the background with no terminal output use this variant of the command instead:</para>
					<programlisting><![CDATA[
		$ nohupjava -Xms128m -Xmx256m -XX:PermSize=128m -XX:MaxPermSize=256m -Dcatalina.home=$CATALINA_HOME \
		    -cp "target/wasp-exec-0.1.0-SNAPSHOT.jar:$CATALINA_HOME/waspPlugins/*" \ 
		    edu.yu.einstein.wasp.daemon.StartDaemon > /dev/null 2>&1 &
					]]></programlisting>
				</listitem>
			</orderedlist>
		</listitem>
	</orderedlist>
	</section>
	<section>
		<title>Building the Documentation</title>
		<orderedlist numeration='arabic'>
			<listitem><para>The DocBook documentation (<ulink url='http://docbook.sourceforge.net'>docbook.sourceforge.net</ulink>) can be built by running the following commands:</para>
				<programlisting><![CDATA[
$ cd $WASP_HOME/wasp-doc
$ mvn clean install docbkx:generate-html docbkx:generate-pdf
$ cp -R $WASP_HOME/wasp-doc/src/docbkx/content/figures \
	$WASP_HOME/wasp-doc/target/docbkx/html
				]]></programlisting>
			</listitem>
			<listitem><para>Javadoc can be generated by running <userinput>$ mvn javadoc:javadoc</userinput> in any component parent folder, e.g.
<filename>WASP_HOME/wasp-web</filename> (for the WASP SYSTEM webapp) or <filename>$WASP_HOME/wasp-core</filename>
(for the core code). The documentation can then be found in <filename>target/apidocs</filename> folder under the component parent folder.</para>
			</listitem>
		</orderedlist>
	</section>
</chapter>
