<?xml version="1.0" encoding="UTF-8"?>
<beans
    xsi:schemaLocation=" http://www.springframework.org/schema/beans 
  http://www.springframework.org/schema/beans/spring-beans-3.1.xsd     
  http://www.springframework.org/schema/context  
  http://www.springframework.org/schema/context/spring-context-3.1.xsd 
  http://www.springframework.org/schema/mvc 
  http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd  
  http://www.springframework.org/schema/aop 
  http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
  http://www.springframework.org/schema/tx
  http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
  http://www.springframework.org/schema/integration
  http://www.springframework.org/schema/integration/spring-integration-2.0.xsd
  http://www.springframework.org/schema/integration/file
  http://www.springframework.org/schema/integration/file/spring-integration-file-2.0.xsd
  http://www.springframework.org/schema/batch 
  http://www.springframework.org/schema/batch/spring-batch-2.1.xsd
  "
    xmlns:mvc="http://www.springframework.org/schema/mvc" 
    xmlns:aop="http://www.springframework.org/schema/aop" 
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:p="http://www.springframework.org/schema/p" 
    xmlns:batch="http://www.springframework.org/schema/batch" 
    xmlns:tx="http://www.springframework.org/schema/tx" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:si="http://www.springframework.org/schema/integration" 
    xmlns:file="http://www.springframework.org/schema/integration/file" 
    xmlns="http://www.springframework.org/schema/beans"
    default-autowire="byName">

  <!--
  from si.xml 
  - jobRegistry
  - jobLauncher

  - logger
  - errorChannel
  - taskService
  - finalStateProcessor

  -->
  <!-- every 5 seconds call taskService.getJobCreatedStates() -->
  <!-- taskService bean defined in si.xml  -->
<!--   <si:inbound-channel-adapter ref="taskService" method="getJobCreatedStates" channel="jobCreateRequestChannel">
    <si:poller>
      <si:interval-trigger interval="5000" />
    </si:poller>
  </si:inbound-channel-adapter> -->


  <!--  -->

  <bean id="workflowPoller" class="edu.yu.einstein.wasp.batch.WorkflowPoller" />

<!-- ****************** -->
<!-- chipseq service starter -->

  <bean id="startJobPoller" parent="workflowPoller">
    <property name="workflowIName"  value="chipSeq"/>
    <property name="taskIName" value="Start Job"/>
  </bean> 

  <si:inbound-channel-adapter ref="startJobPoller" method="getStates" channel="jobCreateRequestChannel">
    <si:poller>
      <si:interval-trigger interval="5000" />
    </si:poller>
  </si:inbound-channel-adapter>

  <!-- intermediary for output from jobCreateRequestChannel: -->
  <!-- calls StateJobLaunchingMessageHandler which calls batch:job 'Start Job' (see below) -->	
  <si:service-activator input-channel="jobCreateRequestChannel" output-channel="logger">
    <bean class="edu.yu.einstein.wasp.batch.StateJobLaunchingMessageHandler" scope="prototype">
       <constructor-arg ref="jobRegistry" />
       <constructor-arg ref="jobLauncher" />
       <constructor-arg ref="jobRepository" />
       <constructor-arg ref="jobOperator" />
       <constructor-arg type="java.lang.String"><value>startJob</value></constructor-arg>
    </bean>
  </si:service-activator>


<!-- /chipseq service starter -->
<!-- ****************** -->


<!-- ****************** -->
<!-- default steps ? -->

  <!-- creates a sample flow -->

  <bean id="createSampleReceiveStateStep" parent="parentStateStep">
    <property name="itemProcessor">
      <bean class="edu.yu.einstein.wasp.batch.CreateSampleReceiveProcessor">
        <property name="targetTask" value="Receive Sample" />
      </bean>
    </property>
  </bean>

  <!-- creates a quote -->

  <bean id="createQuoteJobStateStep" parent="parentStateStep">
    <property name="itemProcessor">
      <bean class="edu.yu.einstein.wasp.batch.CreateJobStateProcessor">
        <property name="targetTask" value="Quote Job" />
      </bean>
    </property>
  </bean>

  <!-- wait for quote -->

  <bean id="waitForQuoteJobStateUpdated" parent="parentStateStep">
    <property name="allowStartIfComplete" value="true" />
    <property name="itemProcessor">
      <bean class="edu.yu.einstein.wasp.batch.WaitForSiblingJobStateProcessor">
        <property name="task" value="Quote Job" />
        <property name="status" value="QUOTED" />
        <property name="siblingTargetStatus" value="FINAL" />
      </bean>
    </property>
  </bean>

  <!-- creates da/pi approval -->
  <bean id="createDaApprovalStateStep" parent="parentStateStep">
    <property name="itemProcessor">
      <bean class="edu.yu.einstein.wasp.batch.CreateJobStateProcessor">
        <property name="targetTask" value="DA Approval" />
      </bean>
    </property>
  </bean>

  <bean id="createPiApprovalStateStep" parent="parentStateStep">
    <property name="itemProcessor">
      <bean class="edu.yu.einstein.wasp.batch.CreateJobStateProcessor">
        <property name="targetTask" value="PI Approval" />
      </bean>
    </property>
  </bean>

  <bean id="waitForDaApprovalStateUpdated" parent="parentStateStep">
    <property name="itemProcessor">
      <bean class="edu.yu.einstein.wasp.batch.WaitForSiblingJobStateProcessor">
        <property name="task" value="DA Approval" />
        <property name="status" value="APPROVED" />
        <property name="siblingTargetStatus" value="FINAL" />
      </bean>
    </property>
  </bean>

  <bean id="waitForPiApprovalStateUpdated" parent="parentStateStep">
    <property name="itemProcessor">
      <bean class="edu.yu.einstein.wasp.batch.WaitForSiblingJobStateProcessor">
        <property name="task" value="PI Approval" />
        <property name="status" value="APPROVED" />
        <property name="siblingTargetStatus" value="FINAL" />
      </bean>
    </property>
  </bean>

  <!-- creates send invoice -->
  <bean id="createSendInvoiceStateStep" parent="parentStateStep">
    <property name="itemProcessor">
      <bean class="edu.yu.einstein.wasp.batch.CreateJobStateProcessor">
        <property name="targetTask" value="Send Invoice" />
      </bean>
    </property>
  </bean>

  <bean id="doSendInvoiceStateStep" parent="parentStateStep">
    <property name="itemProcessor">
      <bean class="edu.yu.einstein.wasp.batch.WaitForSiblingJobStateProcessor">
        <property name="task" value="Send Invoice" />
        <property name="status" value="CREATED" />
        <property name="siblingTargetStatus" value="SENT" />
      </bean>
    </property>
  </bean>

  <bean id="waitForSendInvoiceStateUpdated" parent="parentStateStep">
    <property name="itemProcessor">
      <bean class="edu.yu.einstein.wasp.batch.WaitForSiblingJobStateProcessor">
        <property name="task" value="Send Invoice" />
        <property name="status" value="SENT" />
        <property name="siblingTargetStatus" value="FINAL" />
      </bean>
    </property>
  </bean>

<!-- /default steps --> 
<!-- ****************** -->

<bean id="asyncTaskExecutor" class="org.springframework.core.task.SimpleAsyncTaskExecutor" />


  <!-- ******************** -->
  <!-- default flow --> 
  <batch:job id="startJob" restartable="true">
    <batch:step id="startJob0" parent="createSampleReceiveStateStep" next="startJob1" /> 

    <batch:step id="startJob1" parent="createQuoteJobStateStep" next="startJob3" />
    <batch:step id="startJob3" parent="waitForQuoteJobStateUpdated" next="split1" />

    <batch:split id="split1" next="startJob9" task-executor="asyncTaskExecutor">
      <batch:flow>
        <batch:step id="startJob4" parent="createPiApprovalStateStep" next="startJob6" />
        <batch:step id="startJob6" parent="waitForPiApprovalStateUpdated" />
      </batch:flow>
      <batch:flow>
        <batch:step id="startJob5" parent="createDaApprovalStateStep" next="startJob7" />
        <batch:step id="startJob7" parent="waitForDaApprovalStateUpdated" />
      </batch:flow>
    </batch:split> 


    <batch:step id="startJob9" parent="createSendInvoiceStateStep" next="startJob10" />
    <batch:step id="startJob10" parent="doSendInvoiceStateStep" next="startJob11" />
    <batch:step id="startJob11" parent="waitForSendInvoiceStateUpdated" next="startJob99" />

    <batch:step id="startJob99" parent="finalStateStep" />
  </batch:job>

  <!-- /default flow --> 
  <!-- ********************* -->

</beans>
