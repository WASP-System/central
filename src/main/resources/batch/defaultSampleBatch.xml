<?xml version="1.0" encoding="UTF-8"?>
<beans
    xsi:schemaLocation=" http://www.springframework.org/schema/beans 
  http://www.springframework.org/schema/beans/spring-beans-3.1.xsd     
  http://www.springframework.org/schema/integration
  http://www.springframework.org/schema/integration/spring-integration-2.0.xsd
  http://www.springframework.org/schema/batch 
  http://www.springframework.org/schema/batch/spring-batch-2.1.xsd
  "
    xmlns:p="http://www.springframework.org/schema/p" 
    xmlns:batch="http://www.springframework.org/schema/batch" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:si="http://www.springframework.org/schema/integration" 
    xmlns="http://www.springframework.org/schema/beans"
    default-autowire="byName">

  <bean abstract="true" id="workflowSamplePoller" class="edu.yu.einstein.wasp.batch.poller.WorkflowSamplePoller" />

  <!-- ************************************************ used as template
  <bean id="defaultDnaSamplePoller" parent="workflowSamplePoller">
    <property name="subtypeSampleIName" value="defaultDnaSample"/>
    <property name="taskIName" value="sampleWrapTask"/>
  </bean>

  <si:inbound-channel-adapter ref="defaultDnaSamplePoller" method="getStates" channel="defaultDnaSampleChannel">
    <si:poller fixed-rate="2000"/>
  </si:inbound-channel-adapter>

  <si:service-activator input-channel="defaultDnaSampleChannel" output-channel="logger">
    <bean class="edu.yu.einstein.wasp.batch.launcher.StateJobLaunchingMessageHandler" scope="prototype">
       <constructor-arg ref="jobRegistry" />
       <constructor-arg ref="jobLauncher" />
       <constructor-arg ref="jobRepository" />
       <constructor-arg ref="jobOperator" />
       <constructor-arg type="java.lang.String"><value>defaultDna.workflow</value></constructor-arg>
    </bean>
  </si:service-activator>

  <bean id="defaultLibrarySamplePoller" parent="workflowSamplePoller">
    <property name="subtypeSampleIName" value="defaultLibrarySample"/>
    <property name="taskIName" value="sampleWrapTask"/>
  </bean>

  <si:inbound-channel-adapter ref="defaultLibrarySamplePoller" method="getStates" channel="defaultLibrarySampleChannel">
    <si:poller fixed-rate="5000"/>
  </si:inbound-channel-adapter>

  <si:service-activator input-channel="defaultLibrarySampleChannel" output-channel="logger">
    <bean class="edu.yu.einstein.wasp.batch.StateJobLaunchingMessageHandler" scope="prototype">
       <constructor-arg ref="jobRegistry" />
       <constructor-arg ref="jobLauncher" />
       <constructor-arg ref="jobRepository" />
       <constructor-arg ref="jobOperator" />
       <constructor-arg type="java.lang.String"><value>defaultLibrary.workflow</value></constructor-arg>
    </bean>
  </si:service-activator>

  ******************************************************* -->


  <!-- sampleReceived -->

  <bean id="wasp.sample.receiveSampleStateStep" parent="parentStateStep">
    <property name="itemProcessor">
      <bean class="edu.yu.einstein.wasp.batch.CreateSampleStateProcessor">
        <property name="targetTask" value="Receive Sample" />
      </bean>
    </property>
  </bean>

       <!-- /** todo rewrite to look for statesample.sample.isReceived also **/ -->
  <bean id="wasp.sample.receiveSampleWaitStateStep" parent="parentStateStep">
    <property name="itemProcessor">
      <bean class="edu.yu.einstein.wasp.batch.WaitForSiblingSampleStateProcessor">
        <property name="task" value="Receive Sample" />
        <property name="status" value="RECEIVED" />
        <property name="siblingTargetStatus" value="FINAL" />
      </bean>
    </property>
  </bean>

  <batch:flow id="wasp.sample.sampleReceived">
    <batch:step id="wasp.sample.sampleReceived0" parent="wasp.sample.receiveSampleStateStep" next="wasp.sample.sampleReceived1" />
    <batch:step id="wasp.sample.sampleReceived1" parent="wasp.sample.receiveSampleWaitStateStep" />
  </batch:flow>

  <!-- /sampleReceived -->

  <!-- waitForParentJobInvoiceSent -->
  <bean id="wasp.sample.waitForParentJobInvoiceSentStep" parent="parentStateStep">
    <property name="itemProcessor">
      <bean class="edu.yu.einstein.wasp.batch.WaitForParentJobStateProcessor">
        <property name="task" value="Send Invoice" />
        <property name="status" value="FINAL" />
      </bean>
    </property>
  </bean>

  <batch:flow id="wasp.sample.waitForJobInvoiceSent">
    <batch:step id="wasp.sample.waitForJobInvoiceSent0" parent="wasp.sample.waitForParentJobInvoiceSentStep" />
  </batch:flow>

  <!-- /waitForParentJobInvoiceSent -->


  <!-- createLibrary -->
  <bean id="wasp.sample.createLibraryStateStep" parent="parentStateStep">
    <property name="itemProcessor">
      <bean class="edu.yu.einstein.wasp.batch.CreateSampleStateProcessor">
        <property name="targetTask" value="Create Library" />
      </bean>
    </property>
  </bean>
                                                                                  <bean id="wasp.sample.createLibraryWaitStateStep" parent="parentStateStep">
    <property name="itemProcessor">
      <bean class="edu.yu.einstein.wasp.batch.WaitForSiblingSampleStateProcessor">
        <property name="task" value="Create Library" />
        <property name="status" value="MADE" />
        <property name="siblingTargetStatus" value="FINAL" />
      </bean>
    </property>
  </bean>

  <batch:flow id="wasp.sample.createLibrary">
    <batch:step id="wasp.sample.createLibrary0" parent="wasp.sample.createLibraryStateStep" next="wasp.sample.createLibrary1" />
    <batch:step id="wasp.sample.createLibrary1" parent="wasp.sample.createLibraryWaitStateStep" />
  </batch:flow> 

  <!-- /createLibrary -->

  <!-- linkLibrary -->
  <bean id="wasp.sample.linkLibraryStateStep" parent="parentStateStep">
    <property name="itemProcessor">
      <bean class="edu.yu.einstein.wasp.batch.LinkLibrarySampleStateProcessor">
        <property name="targetTask" value="sampleWrapTask" />
        <property name="targetStatus" value="CREATED" />
      </bean>
    </property>
  </bean>

  <batch:flow id="wasp.sample.linkLibrary">
    <batch:step id="wasp.sample.linkLibrary0" parent="wasp.sample.linkLibraryStateStep" />
  </batch:flow> 
  <!-- /linkLibrary -->

  <!-- libraryPlatformUnitAssign -->
  <bean id="wasp.sample.libraryPlatformUnitAssignStateStep" parent="parentStateStep">
    <property name="itemProcessor">
      <bean class="edu.yu.einstein.wasp.batch.CreateSampleStateProcessor">
        <property name="targetTask" value="assignLibraryToPlatformUnit" />
      </bean>
    </property>
  </bean>
                                                                                  <bean id="wasp.sample.libraryPlatformUnitAssignWaitStateStep" parent="parentStateStep">
    <property name="itemProcessor">
      <bean class="edu.yu.einstein.wasp.batch.WaitForSiblingSampleStateProcessor">
        <property name="task" value="assignLibraryToPlatformUnit" />
        <property name="status" value="ASSIGNED" />
        <property name="siblingTargetStatus" value="FINAL" />
      </bean>
    </property>
  </bean>

  <batch:flow id="wasp.sample.libraryPlatformUnitAssign">
    <batch:step id="wasp.sample.libraryPlatformUnitAssign0" parent="wasp.sample.libraryPlatformUnitAssignStateStep" next="wasp.sample.libraryPlatformUnitAssign1" />
    <batch:step id="wasp.sample.libraryPlatformUnitAssign1" parent="wasp.sample.libraryPlatformUnitAssignWaitStateStep" />
  </batch:flow> 

  <!-- /libraryPlatformUnitAssign -->

  <!-- waitForChildrenFinal -->
  <bean id="wasp.waitForChildrenFinalStep" parent="parentStateStep">
    <property name="itemProcessor">
      <bean class="edu.yu.einstein.wasp.batch.WaitForChildrenStateFinalProcessor" />
    </property>
  </bean>

  <batch:flow id="wasp.waitForChildrenFinal">
    <batch:step id="wasp.waitForChildrenFinal0" parent="wasp.waitForChildrenFinalStep" />
  </batch:flow>

  <!-- /waitForChildrenFinal -->



  <!-- getResults -->
                                                                                  <bean id="wasp.sample.getResultsFileStep" parent="parentStateStep">
    <property name="itemProcessor">
      <bean class="edu.yu.einstein.wasp.batch.WaitForSampleFileProcessor">
        <property name="filenameRegex" value=".*\.completed.txt" />
      </bean>
    </property>
  </bean>

  <batch:flow id="wasp.sample.getResults">
    <batch:step id="wasp.sample.getResults0" parent="wasp.sample.getResultsFileStep" />
  </batch:flow> 


  <!-- /getResults -->

  <!-- aligner -->

  <bean id="createRunAlignerStateStep" parent="parentStateStep">
    <property name="itemProcessor">
      <bean class="edu.yu.einstein.wasp.batch.CreateSoftwareRunProcessor">
        <property name="softwareIName" value="aligner" />
      </bean>
    </property>
  </bean>

  <batch:flow id="wasp.aligner.run">
    <batch:step id="wasp.aligner.run0" parent="createRunAlignerStateStep" next="wasp.aligner.run1" />
    <batch:step id="wasp.aligner.run1" parent="wasp.waitForChildrenFinalStep" />
  </batch:flow>

  <!-- /aligner -->

  <!-- peakcaller  -->
  <bean id="createRunPeakcallerStateStep" parent="parentStateStep">
    <property name="itemProcessor">
      <bean class="edu.yu.einstein.wasp.batch.CreateSoftwareRunProcessor">
        <property name="softwareIName" value="peakcaller" />
      </bean>
    </property>
  </bean>

  <batch:flow id="wasp.peakcaller.run">
    <batch:step id="wasp.peakcaller.run0" parent="createRunPeakcallerStateStep" next="wasp.peakcaller.run1" />
    <batch:step id="wasp.peakcaller.run1" parent="wasp.waitForChildrenFinalStep" />
  </batch:flow>

  <!-- peakcaller  -->

  <!-- ******************************************** -->



  <!-- default mps dna flow-->
  <batch:flow id="wasp.sample.defaultMpsDnaFlow">
    <batch:flow id="wasp.sample.defaultMpsDnaFlow0" parent="wasp.sample.sampleReceived" next="wasp.sample.defaultMpsDnaFlow1" />
    <batch:flow id="wasp.sample.defaultMpsDnaFlow1" parent="wasp.sample.waitForJobInvoiceSent" next="wasp.sample.defaultMpsDnaFlow2" /> 
    <batch:flow id="wasp.sample.defaultMpsDnaFlow2" parent="wasp.sample.createLibrary" next="wasp.sample.defaultMpsDnaFlow3" /> 
    <batch:flow id="wasp.sample.defaultMpsDnaFlow3" parent="wasp.sample.linkLibrary" /> 

  </batch:flow>
  <!-- /default mps dna flow-->

  <!-- default mps library flow-->
  <batch:flow id="wasp.sample.defaultMpsLibraryFlow">
    <batch:flow id="wasp.sample.defaultMpsLibraryFlow0" parent="wasp.sample.sampleReceived" next="wasp.sample.defaultMpsLibraryFlow1"/>
    <batch:flow id="wasp.sample.defaultMpsLibraryFlow1" parent="wasp.sample.waitForJobInvoiceSent" next="wasp.sample.defaultMpsLibraryFlow2" /> 
    <batch:flow id="wasp.sample.defaultMpsLibraryFlow2" parent="wasp.sample.libraryPlatformUnitAssign" next="wasp.sample.defaultMpsLibraryFlow3" /> 
    <batch:flow id="wasp.sample.defaultMpsLibraryFlow3" parent="wasp.waitForChildrenFinal" next="wasp.sample.defaultMpsLibraryFlow4" />
    <batch:flow id="wasp.sample.defaultMpsLibraryFlow4" parent="wasp.sample.getResults" />
  </batch:flow>
  <!-- /default mps library flow-->


</beans>
