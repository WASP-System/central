<?xml version="1.0" encoding="UTF-8"?>
<beans
    xsi:schemaLocation=" http://www.springframework.org/schema/beans 
  http://www.springframework.org/schema/beans/spring-beans-3.1.xsd     
  http://www.springframework.org/schema/context  
  http://www.springframework.org/schema/context/spring-context-3.1.xsd 
  http://www.springframework.org/schema/integration
  http://www.springframework.org/schema/integration/spring-integration-2.0.xsd
  http://www.springframework.org/schema/integration/file
  http://www.springframework.org/schema/integration/file/spring-integration-file-2.0.xsd
  http://www.springframework.org/schema/batch 
  http://www.springframework.org/schema/batch/spring-batch-2.1.xsd
  "
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:batch="http://www.springframework.org/schema/batch" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:si="http://www.springframework.org/schema/integration" 
    xmlns:file="http://www.springframework.org/schema/integration/file" 
    xmlns="http://www.springframework.org/schema/beans"
    default-autowire="byName">

  <!--
  from si.xml 
  - jobRegistry
  - jobLauncher

  - logger
  - errorChannel
  - taskService
  - finalStateProcessor

  -->
  <!-- every 5 seconds call taskService.getJobCreatedStates() -->
  <!-- taskService bean defined in si.xml  -->

  <bean id="workflowPoller" class="edu.yu.einstein.wasp.batch.WorkflowPoller" />

  <bean id="startJobPoller" parent="workflowPoller">
    <property name="workflowIName" value="xxxx"/>
    <property name="taskIName" value="Start Job"/>
  </bean> 

<!--
  <si:inbound-channel-adapter ref="startJobPoller" method="getStates" channel="jobCreateRequestChannel">
    <si:poller>
      <si:interval-trigger interval="5000000" />
    </si:poller>
  </si:inbound-channel-adapter>

  <si:service-activator input-channel="jobCreateRequestChannel" output-channel="logger">
    <bean class="edu.yu.einstein.wasp.batch.StateJobLaunchingMessageHandler" scope="prototype">
       <constructor-arg ref="jobRegistry" />
       <constructor-arg ref="jobLauncher" />
       <constructor-arg ref="jobRepository" />
       <constructor-arg ref="jobOperator" />
       <constructor-arg type="java.lang.String"><value>startJob</value></constructor-arg>
    </bean>
  </si:service-activator> -->


<!-- ****************** -->
<!-- default steps ? -->

  <!-- creates a sample flow -->

  <bean id="createSampleReceiveStateStep" parent="parentStateStep">
    <property name="itemProcessor">
      <bean class="edu.yu.einstein.wasp.batch.CreateSampleReceiveProcessor">
        <property name="targetTask" value="Receive Sample" />
      </bean>
    </property>
  </bean>

  <!-- creates a quote -->

  <bean id="createQuoteJobStateStep" parent="parentStateStep">
    <property name="itemProcessor">
      <bean class="edu.yu.einstein.wasp.batch.CreateJobStateProcessor">
        <property name="targetTask" value="Quote Job" />
      </bean>
    </property>
  </bean>

  <!-- wait for quote -->

  <bean id="waitForQuoteJobStateUpdated" parent="parentStateStep">
    <property name="allowStartIfComplete" value="true" />
    <property name="itemProcessor">
      <bean class="edu.yu.einstein.wasp.batch.WaitForSiblingJobStateProcessor">
        <property name="task" value="Quote Job" />
        <property name="status" value="QUOTED" />
        <property name="siblingTargetStatus" value="FINAL" />
      </bean>
    </property>
  </bean>

  <!-- creates da/pi approval -->
  <bean id="createDaApprovalStateStep" parent="parentStateStep">
    <property name="itemProcessor">
      <bean class="edu.yu.einstein.wasp.batch.CreateJobStateProcessor">
        <property name="targetTask" value="DA Approval" />
      </bean>
    </property>
  </bean>

  <bean id="createPiApprovalStateStep" parent="parentStateStep">
    <property name="itemProcessor">
      <bean class="edu.yu.einstein.wasp.batch.CreateJobStateProcessor">
        <property name="targetTask" value="PI Approval" />
      </bean>
    </property>
  </bean>

  <bean id="waitForDaApprovalStateUpdated" parent="parentStateStep">
    <property name="itemProcessor">
      <bean class="edu.yu.einstein.wasp.batch.WaitForSiblingJobStateProcessor">
        <property name="task" value="DA Approval" />
        <property name="status" value="APPROVED" />
        <property name="siblingTargetStatus" value="FINAL" />
      </bean>
    </property>
  </bean>

  <bean id="waitForPiApprovalStateUpdated" parent="parentStateStep">
    <property name="itemProcessor">
      <bean class="edu.yu.einstein.wasp.batch.WaitForSiblingJobStateProcessor">
        <property name="task" value="PI Approval" />
        <property name="status" value="APPROVED" />
        <property name="siblingTargetStatus" value="FINAL" />
      </bean>
    </property>
  </bean>

  <!-- creates send invoice -->
  <bean id="createSendInvoiceStateStep" parent="parentStateStep">
    <property name="itemProcessor">
      <bean class="edu.yu.einstein.wasp.batch.CreateJobStateProcessor">
        <property name="targetTask" value="Send Invoice" />
      </bean>
    </property>
  </bean>

  <bean id="doSendInvoiceStateStep" parent="parentStateStep">
    <property name="itemProcessor">
      <bean class="edu.yu.einstein.wasp.batch.WaitForSiblingJobStateProcessor">
        <property name="task" value="Send Invoice" />
        <property name="status" value="CREATED" />
        <property name="siblingTargetStatus" value="SENT" />
      </bean>
    </property>
  </bean>

  <bean id="waitForSendInvoiceStateUpdated" parent="parentStateStep">
    <property name="itemProcessor">
      <bean class="edu.yu.einstein.wasp.batch.WaitForSiblingJobStateProcessor">
        <property name="task" value="Send Invoice" />
        <property name="status" value="SENT" />
        <property name="siblingTargetStatus" value="FINAL" />
      </bean>
    </property>
  </bean>

<!-- /default steps --> 
<!-- ****************** -->

  <!-- ******************** -->
  <!-- default flow --> 
  <batch:flow id="quoteFlow">
     <batch:step id="quoteStep0" parent="createQuoteJobStateStep" next="quoteStep1" />
     <batch:step id="quoteStep1" parent="waitForQuoteJobStateUpdated" />
  </batch:flow>

  <batch:flow id="piApprovalFlow">
    <batch:step id="piApprovalStep0" parent="createPiApprovalStateStep" next="piApprovalStep1" />
    <batch:step id="piApprovalStep1" parent="waitForPiApprovalStateUpdated" />
  </batch:flow>

  <batch:flow id="daApprovalFlow">
    <batch:step id="daApprovalStep0" parent="createDaApprovalStateStep" next="daApprovalStep1" />
    <batch:step id="daApprovalStep1" parent="waitForDaApprovalStateUpdated" />
  </batch:flow>

  <batch:flow id="invoiceFlow">
    <batch:step id="invoiceStep0" parent="createSendInvoiceStateStep" next="invoiceStep1" />
    <batch:step id="invoiceStep1" parent="doSendInvoiceStateStep" next="invoiceStep2" />
    <batch:step id="invoiceStep2" parent="waitForSendInvoiceStateUpdated" />
  </batch:flow>

  <batch:flow id="finishJobFlow">
    <batch:step id="finishJobStep" parent="finalStateStep" />
  </batch:flow>

  <!-- ****** -->

  <batch:job id="startJob" restartable="true">
    <batch:step id="startJob0" parent="createSampleReceiveStateStep" next="job.quoteFlow" /> 

    <batch:flow id="job.quoteFlow" parent="quoteFlow" next="job.approvals" />

    <batch:split id="job.approvals" next="job.invoiceFlow" task-executor="asyncTaskExecutor">
      <batch:flow>
        <batch:flow id="job.piApprovalFlow" parent="piApprovalFlow" />
      </batch:flow>
      <batch:flow>
        <batch:flow id="job.daApprovalFlow" parent="daApprovalFlow" />
      </batch:flow>
    </batch:split> 

    <batch:flow id="job.invoiceFlow" parent="invoiceFlow" next="job.finishFlow" />
    <batch:flow id="job.finishFlow" parent="finishJobFlow" />
  </batch:job>


  <!-- /default flow --> 
  <!-- ********************* -->

</beans>
