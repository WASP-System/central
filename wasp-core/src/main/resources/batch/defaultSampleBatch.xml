<?xml version="1.0" encoding="UTF-8"?>
<beans
    xsi:schemaLocation=" http://www.springframework.org/schema/beans 
  http://www.springframework.org/schema/beans/spring-beans-3.1.xsd     
  http://www.springframework.org/schema/integration
  http://www.springframework.org/schema/integration/spring-integration-2.0.xsd
  http://www.springframework.org/schema/batch 
  http://www.springframework.org/schema/batch/spring-batch-2.1.xsd
  "
    xmlns:p="http://www.springframework.org/schema/p" 
    xmlns:batch="http://www.springframework.org/schema/batch" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:si="http://www.springframework.org/schema/integration" 
    xmlns="http://www.springframework.org/schema/beans"
    default-autowire="byName">

  <bean abstract="true" id="wasp.sample.Poller" class="edu.yu.einstein.wasp.batch.poller.WorkflowSamplePoller" />

  <!-- ************************************************ used as template
  <bean id="waspDna.sample.Poller" parent="wasp.sample.Poller">
    <property name="subtypeSampleIName" value="defaultDnaSample"/>
    <property name="taskIName" value="sampleWrapTask"/>
  </bean>

  <si:inbound-channel-adapter ref="waspDna.sample.Poller" method="getStates" channel="waspDna.sample.Channel">
    <si:poller fixed-rate="120000"/>
  </si:inbound-channel-adapter>

  <si:service-activator input-channel="waspDna.sample.Channel" output-channel="logger">
    <bean class="edu.yu.einstein.wasp.batch.launcher.StateJobLaunchingMessageHandler" scope="prototype">
       <constructor-arg ref="jobRegistry" />
       <constructor-arg ref="jobLauncher" />
       <constructor-arg ref="jobRepository" />
       <constructor-arg ref="jobOperator" />
       <constructor-arg type="java.lang.String"><value>waspDna.sample.Job</value></constructor-arg>
    </bean>
  </si:service-activator>

  <bean id="waspLibrary.sample.Poller" parent="workflowSamplePoller">
    <property name="subtypeSampleIName" value="defaultLibrarySample"/>
    <property name="taskIName" value="sampleWrapTask"/>
  </bean>

  <si:inbound-channel-adapter ref="waspLibrary.sample.Poller" method="getStates" channel="waspLibrary.sample.Channel">
    <si:poller fixed-rate="120000"/>
  </si:inbound-channel-adapter>

  <si:service-activator input-channel="waspLibrary.sample.Channel" output-channel="logger">
    <bean class="edu.yu.einstein.wasp.batch.StateJobLaunchingMessageHandler" scope="prototype">
       <constructor-arg ref="jobRegistry" />
       <constructor-arg ref="jobLauncher" />
       <constructor-arg ref="jobRepository" />
       <constructor-arg ref="jobOperator" />
       <constructor-arg type="java.lang.String"><value>waspLibrary.sample.Job</value></constructor-arg>
    </bean>
  </si:service-activator>

  ******************************************************* -->


  <!-- sampleReceived -->

  <bean id="wasp.sample.ReceiveStateStep" parent="parentStateStep">
    <property name="itemProcessor">
      <bean class="edu.yu.einstein.wasp.batch.CreateSampleStateProcessor">
        <property name="targetTask" value="Receive Sample" />
      </bean>
    </property>
  </bean>

       <!-- /** todo rewrite to look for statesample.sample.isReceived also **/ -->
  <bean id="wasp.sample.ReceiveWaitStateStep" parent="parentStateStep">
    <property name="itemProcessor">
      <bean class="edu.yu.einstein.wasp.batch.WaitForSiblingSampleStateProcessor">
        <property name="task" value="Receive Sample" />
        <property name="statusMap">
          <map>
            <entry key="UNRECEIVABLE" value="XXX" />
            <entry key="COMPLETED" value="FINALIZED" />
          </map>
        </property>
      </bean>
    </property>
  </bean>

  <batch:flow id="wasp.sample.ReceiveFlow">
    <batch:step id="wasp.sample.ReceiveFlow0" parent="wasp.sample.ReceiveStateStep" next="wasp.sample.ReceiveFlow1" />
    <batch:step id="wasp.sample.ReceiveFlow1" parent="wasp.sample.ReceiveWaitStateStep" />
  </batch:flow>

  <!-- /sampleReceived -->

  <!-- waitForParentJobInvoiceSent -->
  <bean id="wasp.sample.WaitForParentJobInvoiceSentStep" parent="parentStateStep">
    <property name="itemProcessor">
      <bean class="edu.yu.einstein.wasp.batch.WaitForParentJobStateProcessor">
        <property name="task" value="Send Invoice" />
        <property name="status" value="FINALIZED" />
      </bean>
    </property>
  </bean>

  <batch:flow id="wasp.sample.WaitForJobInvoiceSentFlow">
    <batch:step id="wasp.sample.WaitForJobInvoiceSentFlow0" parent="wasp.sample.WaitForParentJobInvoiceSentStep" />
  </batch:flow>

  <!-- /waitForParentJobInvoiceSent -->


  <!-- createLibrary -->
  <bean id="wasp.sample.CreateLibraryStateStep" parent="parentStateStep">
    <property name="itemProcessor">
      <bean class="edu.yu.einstein.wasp.batch.CreateSampleStateProcessor">
        <property name="targetTask" value="Create Library" />
      </bean>
    </property>
  </bean>

  <bean id="wasp.sample.CreateLibraryWaitStateStep" parent="parentStateStep">
    <property name="itemProcessor">
      <bean class="edu.yu.einstein.wasp.batch.WaitForSiblingSampleStateProcessor">
        <property name="task" value="Create Library" />
        <property name="status" value="COMPLETED" />
        <property name="siblingTargetStatus" value="FINALIZED" />
      </bean>
    </property>
  </bean>

  <batch:flow id="wasp.sample.CreateLibraryFlow">
    <batch:step id="wasp.sample.CreateLibraryFlow0" parent="wasp.sample.CreateLibraryStateStep" next="wasp.sample.CreateLibraryFlow1" />
    <batch:step id="wasp.sample.CreateLibraryFlow1" parent="wasp.sample.CreateLibraryWaitStateStep" />
  </batch:flow> 

  <!-- /createLibrary -->

  <!-- linkLibrary -->
  <bean id="wasp.sample.LinkLibraryStateStep" parent="parentStateStep">
    <property name="itemProcessor">
      <bean class="edu.yu.einstein.wasp.batch.LinkLibrarySampleStateProcessor">
        <property name="targetTask" value="sampleWrapTask" />
        <property name="targetStatus" value="CREATED" />
      </bean>
    </property>
  </bean>

  <batch:flow id="wasp.sample.LinkLibraryFlow">
    <batch:step id="wasp.sample.LinkLibraryFlow0" parent="wasp.sample.LinkLibraryStateStep" />
  </batch:flow> 
  <!-- /linkLibrary -->

  <!-- libraryPlatformUnitAssign -->
  <bean id="wasp.sample.LibraryPlatformUnitAssignStateStep" parent="parentStateStep">
    <property name="itemProcessor">
      <bean class="edu.yu.einstein.wasp.batch.CreateSampleStateProcessor">
        <property name="targetTask" value="assignLibraryToPlatformUnit" />
      </bean>
    </property>
  </bean>
                                                                                  <bean id="wasp.sample.LibraryPlatformUnitAssignWaitStateStep" parent="parentStateStep">
    <property name="itemProcessor">
      <bean class="edu.yu.einstein.wasp.batch.WaitForSiblingSampleStateProcessor">
        <property name="task" value="assignLibraryToPlatformUnit" />
        <property name="status" value="COMPLETED" />
        <property name="siblingTargetStatus" value="FINALIZED" />
      </bean>
    </property>
  </bean>

  <batch:flow id="wasp.sample.LibraryPlatformUnitAssignFlow">
    <batch:step id="wasp.sample.LibraryPlatformUnitAssignFlow0" parent="wasp.sample.LibraryPlatformUnitAssignStateStep" next="wasp.sample.LibraryPlatformUnitAssignFlow1" />
    <batch:step id="wasp.sample.LibraryPlatformUnitAssignFlow1" parent="wasp.sample.LibraryPlatformUnitAssignWaitStateStep" />
  </batch:flow> 

  <!-- /libraryPlatformUnitAssign -->


  <!-- getResults -->
                                                                                  <bean id="wasp.sample.GetResultsFileStep" parent="parentStateStep">
    <property name="itemProcessor">
      <bean class="edu.yu.einstein.wasp.batch.WaitForSampleFileProcessor">
        <property name="filenameRegex" value=".*\.completed.txt" />
      </bean>
    </property>
  </bean>

  <batch:flow id="wasp.sample.GetResultsFlow">
    <batch:step id="wasp.sample.GetResultsFlow0" parent="wasp.sample.GetResultsFileStep" />
  </batch:flow> 


  <!-- /getResults -->

  <!-- aligner -->

  <bean id="wasp.sample.AlignerRunStateStep" parent="parentStateStep">
    <property name="itemProcessor">
      <bean class="edu.yu.einstein.wasp.batch.CreateSoftwareRunProcessor">
        <property name="softwareIName" value="aligner" />
      </bean>
    </property>
  </bean>

  <batch:flow id="wasp.sample.AlignerRunFlow">
    <batch:step id="wasp.sample.AlignerRunFlow0" parent="wasp.sample.AlignerRunStateStep" next="wasp.sample.AlignerRunFlow1" />
    <batch:step id="wasp.sample.AlignerRunFlow1" parent="wasp.default.WaitForChildrenFinalStep" />
  </batch:flow>

  <!-- /aligner -->

  <!-- peakcaller  -->
  <bean id="wasp.sample.PeakcallerRunStateStep" parent="parentStateStep">
    <property name="itemProcessor">
      <bean class="edu.yu.einstein.wasp.batch.CreateSoftwareRunProcessor">
        <property name="softwareIName" value="peakcaller" />
      </bean>
    </property>
  </bean>

  <batch:flow id="wasp.sample.PeakcallerRunFlow">
    <batch:step id="wasp.sample.PeakcallerRunFlow0" parent="wasp.sample.PeakcallerRunStateStep" next="wasp.sample.PeakcallerRunFlow1" />
    <batch:step id="wasp.sample.PeakcallerRunFlow1" parent="wasp.default.WaitForChildrenFinalStep" />
  </batch:flow>

  <!-- peakcaller  -->

  <!-- ******************************************** -->



  <!-- default mps dna flow-->
  <batch:flow id="wasp.sample.DefaultMpsDnaFlow">
    <batch:flow id="wasp.sample.DefaultMpsDnaFlow0" parent="wasp.sample.ReceiveFlow" next="wasp.sample.DefaultMpsDnaFlow1" />
    <batch:flow id="wasp.sample.DefaultMpsDnaFlow1" parent="wasp.sample.WaitForJobInvoiceSentFlow" next="wasp.sample.DefaultMpsDnaFlow2" /> 
    <batch:flow id="wasp.sample.DefaultMpsDnaFlow2" parent="wasp.sample.CreateLibraryFlow" next="wasp.sample.DefaultMpsDnaFlow3" /> 
    <batch:flow id="wasp.sample.DefaultMpsDnaFlow3" parent="wasp.sample.LinkLibraryFlow" /> 

  </batch:flow>
  <!-- /default mps dna flow-->

  <!-- default mps library flow-->
  <batch:flow id="wasp.sample.DefaultMpsLibraryFlow">
    <batch:flow id="wasp.sample.DefaultMpsLibraryFlow0" parent="wasp.sample.ReceiveFlow" next="wasp.sample.DefaultMpsLibraryFlow1"/>
    <batch:flow id="wasp.sample.DefaultMpsLibraryFlow1" parent="wasp.sample.WaitForJobInvoiceSentFlow" next="wasp.sample.DefaultMpsLibraryFlow2" /> 
    <batch:flow id="wasp.sample.DefaultMpsLibraryFlow2" parent="wasp.sample.LibraryPlatformUnitAssignFlow" next="wasp.sample.DefaultMpsLibraryFlow3" /> 
    <batch:flow id="wasp.sample.DefaultMpsLibraryFlow3" parent="wasp.default.WaitForChildrenFinalFlow" next="wasp.sample.DefaultMpsLibraryFlow4" />
    <batch:flow id="wasp.sample.DefaultMpsLibraryFlow4" parent="wasp.sample.GetResultsFlow" />
  </batch:flow>
  <!-- /default mps library flow-->


</beans>
