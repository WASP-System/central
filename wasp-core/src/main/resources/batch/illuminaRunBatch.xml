<?xml version="1.0" encoding="UTF-8"?>
<beans
    xsi:schemaLocation=" http://www.springframework.org/schema/beans 
  http://www.springframework.org/schema/beans/spring-beans.xsd     
  http://www.springframework.org/schema/integration
  http://www.springframework.org/schema/integration/spring-integration.xsd
  http://www.springframework.org/schema/batch 
  http://www.springframework.org/schema/batch/spring-batch.xsd
  "
    xmlns:p="http://www.springframework.org/schema/p" 
    xmlns:batch="http://www.springframework.org/schema/batch" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:si="http://www.springframework.org/schema/integration" 
    xmlns="http://www.springframework.org/schema/beans"
    default-autowire="byName">

  <bean id="illumina.run.Poller" parent="wasp.run.ResourceCategoryPoller" >
    <property name="resourceCategoryIName" value="illuminaHiSeq2000" />
    <property name="taskIName" value="runWrapTask"/>
  </bean>

  <si:inbound-channel-adapter ref="illumina.run.Poller" method="getStates" channel="illumina.run.Channel">
    <si:poller fixed-rate="10000"/>
  </si:inbound-channel-adapter>

  <si:service-activator input-channel="illumina.run.Channel" output-channel="logger">
    <bean class="edu.yu.einstein.wasp.batch.launcher.StateJobLaunchingMessageHandler" scope="prototype">
       <constructor-arg ref="jobRegistry" />
       <constructor-arg ref="jobLauncher" />
       <constructor-arg ref="jobRepository" />
       <constructor-arg ref="jobOperator" />
       <constructor-arg type="java.lang.String"><value>illumina.run.Job</value></constructor-arg>
    </bean>
  </si:service-activator>


  <!-- GetResults -->
                                                                                  <bean id="illumina.run.GetResultsStep" parent="parentStateStep">
    <property name="itemProcessor">
      <bean class="edu.yu.einstein.wasp.batch.WaitForRunFileProcessor">
        <property name="filenameRegex" value=".*\.completed.txt" />
      </bean>
    </property>
  </bean>

  <batch:flow id="illumina.run.GetResultsFlow">
    <batch:step id="illumina.run.GetResultsFlow0" parent="illumina.run.GetResultsStep" />
  </batch:flow> 


  <!-- /GetResults -->

  <!-- qcRun -->
  <bean id="illumina.run.CreateQcApprovalStateStep" parent="parentStateStep">
    <property name="itemProcessor">
      <bean class="edu.yu.einstein.wasp.batch.CreateSampleStateProcessor">
        <property name="targetTask" value="runQcApproval" />
      </bean>
    </property>
  </bean>

  <bean id="illumina.run.WaitForQcApprovalStateStep" parent="parentStateStep">
    <property name="itemProcessor">
      <bean class="edu.yu.einstein.wasp.batch.WaitForSiblingRunStateProcessor">
        <property name="task" value="runQcApproval" />
        <property name="status" value="APPROVED" />
        <property name="siblingTargetStatus" value="FINALIZED" />
      </bean>
    </property>
  </bean>

  <batch:flow id="illumina.run.QcApprovalFlow">
    <batch:step id="illumina.run.QcApprovalStep0" parent="illumina.run.CreateQcApprovalStateStep" next="illumina.run.QcApprovalStep1" />
    <batch:step id="illumina.run.QcApprovalStep1" parent="illumina.run.WaitForQcApprovalStateStep" />
  </batch:flow>

  <!-- /qcRun -->


  <!-- default run flow-->
  <batch:flow id="illumina.run.Flow">
    <batch:flow id="illumina.run.Flow0" parent="illumina.run.GetResultsFlow" next="illumina.run.Flow1" />
    <batch:flow id="illumina.run.Flow1" parent="illumina.run.QcApprovalFlow" />
  </batch:flow>
  <!-- /default mps dna flow-->

  <!-- default run job flow-->
  <batch:job id="illumina.run.Job">
    <batch:flow id="illumina.run.Job0" parent="illumina.run.Flow" next="illumina.run.Job1" />

    <batch:flow id="illumina.run.Job1" parent="wasp.default.FinalFlow" />
  </batch:job>
  <!-- default run job flow-->




</beans>
