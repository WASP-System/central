<?xml version="1.0" encoding="UTF-8"?>
<beans
    xsi:schemaLocation=" http://www.springframework.org/schema/beans 
  http://www.springframework.org/schema/beans/spring-beans.xsd     
  http://www.springframework.org/schema/context  
  http://www.springframework.org/schema/context/spring-context.xsd 
  http://www.springframework.org/schema/integration
  http://www.springframework.org/schema/integration/spring-integration.xsd
  http://www.springframework.org/schema/integration/file
  http://www.springframework.org/schema/integration/file/spring-integration-file.xsd
  http://www.springframework.org/schema/batch 
  http://www.springframework.org/schema/batch/spring-batch.xsd
  "
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:batch="http://www.springframework.org/schema/batch" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:si="http://www.springframework.org/schema/integration" 
    xmlns:file="http://www.springframework.org/schema/integration/file" 
    xmlns="http://www.springframework.org/schema/beans"
    default-autowire="byName">

  <!--
  from si.xml 
  - jobRegistry
  - jobLauncher

  - logger
  - errorChannel
  - taskService
  - finalStateProcessor
  - parentStep

  -->
  <!-- every 5 seconds call taskService.getJobCreatedStates() -->
  <!-- taskService bean defined in si.xml  -->

  <bean abstract="true" id="wasp.job.Poller" class="edu.yu.einstein.wasp.batch.poller.WorkflowPoller" />

<!--
  <bean id="startJobPoller" parent="workflowPoller">
    <property name="workflowIName" value="xxxx"/>
    <property name="taskIName" value="wasp.job.Job"/>
  </bean> 
-->

<!--
  /** remove java comments when deploying
    this is what a baseline poller should look like **/
  
  <si:inbound-channel-adapter ref="startJobPoller" method="getStates" channel="jobCreateRequestChannel">
    <si:poller fixed-delay="5000" /> /** how often it should poll */
  </si:inbound-channel-adapter>

  <si:service-activator input-channel="jobCreateRequestChannel" output-channel="wasp.logger">
    <bean class="edu.yu.einstein.wasp.batch.launcher.StateJobLaunchingMessageHandler" scope="prototype">
       <constructor-arg ref="jobRegistry" />
       <constructor-arg ref="jobLauncher" />
       <constructor-arg ref="jobRepository" />
       <constructor-arg ref="jobOperator" />
       <constructor-arg type="java.lang.String"><value>startJob</value></constructor-arg> /** the spring batch job that it should start **/
    </bean>
  </si:service-activator> -->


<!-- ****************** -->
<!-- default steps ? -->

  <!-- creates a sample flow -->

  <bean id="wasp.job.CreateSampleStateStep" parent="parentStateStep">
    <property name="itemProcessor">
      <bean class="edu.yu.einstein.wasp.batch.CreateSampleStatesFromJobSampleProcessor">
        <property name="targetTask" value="sampleWrapTask" />
      </bean>
    </property>
  </bean>

  <batch:flow id="wasp.job.CreateSampleFlow">
    <batch:step id="wasp.job.CreateSampleFlow0" parent="wasp.job.CreateSampleStateStep" />
  </batch:flow>



  <!-- quote -->

  <bean id="wasp.job.QuoteStateStep" parent="parentStateStep">
    <property name="itemProcessor">
      <bean class="edu.yu.einstein.wasp.batch.CreateJobStateProcessor">
        <property name="targetTask" value="Quote Job" />
      </bean>
    </property>
  </bean>

  <bean id="wasp.job.WaitForQuoteStep" parent="parentStateStep">
    <property name="allowStartIfComplete" value="true" />
    <property name="itemProcessor">
      <bean class="edu.yu.einstein.wasp.batch.WaitForSiblingJobStateProcessor">
        <property name="task" value="Quote Job" />
        <property name="status" value="COMPLETED" />
        <property name="siblingTargetStatus" value="FINALIZED" />
      </bean>
    </property>
  </bean>

  <batch:flow id="wasp.job.QuoteFlow">
     <batch:step id="wasp.job.QuoteFlow0" parent="wasp.job.QuoteStateStep" next="wasp.job.QuoteFlow1" />
     <batch:step id="wasp.job.QuoteFlow1" parent="wasp.job.WaitForQuoteStep" />
  </batch:flow>

  <!-- /quote -->

  <!-- creates da/pi approval -->
  <bean id="wasp.job.DaApprovalStateStep" parent="parentStateStep">
    <property name="itemProcessor">
      <bean class="edu.yu.einstein.wasp.batch.CreateJobStateProcessor">
        <property name="targetTask" value="DA Approval" />
      </bean>
    </property>
  </bean>

  <bean id="wasp.job.PiApprovalStateStep" parent="parentStateStep">
    <property name="itemProcessor">
      <bean class="edu.yu.einstein.wasp.batch.CreateJobStateProcessor">
        <property name="targetTask" value="PI Approval" />
      </bean>
    </property>
  </bean>

  <bean id="wasp.job.WaitForDaApprovalStep" parent="parentStateStep">
    <property name="itemProcessor">
      <bean class="edu.yu.einstein.wasp.batch.WaitForSiblingJobStateProcessor">
        <property name="task" value="DA Approval" />
        <property name="status" value="COMPLETED" />
        <property name="siblingTargetStatus" value="FINALIZED" />
      </bean>
    </property>
  </bean>

  <bean id="wasp.job.WaitForPiApprovalStep" parent="parentStateStep">
    <property name="itemProcessor">
      <bean class="edu.yu.einstein.wasp.batch.WaitForSiblingJobStateProcessor">
        <property name="task" value="PI Approval" />
        <property name="status" value="COMPLETED" />
        <property name="siblingTargetStatus" value="FINALIZED" />
      </bean>
    </property>
  </bean>

  <batch:flow id="wasp.job.PiApprovalFlow">
    <batch:step id="wasp.job.PiApprovalFlow0" parent="wasp.job.PiApprovalStateStep" next="wasp.job.PiApprovalFlow1" />
    <batch:step id="wasp.job.PiApprovalFlow1" parent="wasp.job.WaitForPiApprovalStep" />
  </batch:flow>

  <batch:flow id="wasp.job.DaApprovalFlow">
    <batch:step id="wasp.job.DaApprovalFlow0" parent="wasp.job.DaApprovalStateStep" next="wasp.job.DaApprovalFlow1" />
    <batch:step id="wasp.job.DaApprovalFlow1" parent="wasp.job.WaitForDaApprovalStep" />
  </batch:flow>


  <!-- creates send invoice -->
  <bean id="wasp.job.SendInvoiceStateStep" parent="parentStateStep">
    <property name="itemProcessor">
      <bean class="edu.yu.einstein.wasp.batch.CreateJobStateProcessor">
        <property name="targetTask" value="Send Invoice" />
      </bean>
    </property>
  </bean>

  <bean id="wasp.job.DoSendInvoiceStep" parent="parentStateStep">
    <property name="itemProcessor">
      <bean class="edu.yu.einstein.wasp.batch.WaitForSiblingJobStateProcessor">
        <property name="task" value="Send Invoice" />
        <property name="status" value="CREATED" />
        <property name="siblingTargetStatus" value="COMPLETED" />
      </bean>
    </property>
  </bean>

  <bean id="wasp.job.WaitForSendInvoiceStep" parent="parentStateStep">
    <property name="itemProcessor">
      <bean class="edu.yu.einstein.wasp.batch.WaitForSiblingJobStateProcessor">
        <property name="task" value="Send Invoice" />
        <property name="status" value="COMPLETED" />
        <property name="siblingTargetStatus" value="FINALIZED" />
      </bean>
    </property>
  </bean>

  <batch:flow id="wasp.job.SendInvoiceFlow">
    <batch:step id="wasp.job.SendInvoiceFlow0" parent="wasp.job.SendInvoiceStateStep" next="wasp.job.SendInvoiceFlow1" />
    <batch:step id="wasp.job.SendInvoiceFlow1" parent="wasp.job.DoSendInvoiceStep" next="wasp.job.SendInvoiceFlow2" />
    <batch:step id="wasp.job.SendInvoiceFlow2" parent="wasp.job.WaitForSendInvoiceStep" />
  </batch:flow>

  <!-- *** FLOWS OF FLOWS *** -->

  <batch:flow id="wasp.job.DefaultAdminFlow">
    <batch:flow id="wasp.job.DefaultAdminFlow0" parent="wasp.job.CreateSampleFlow" next="wasp.job.DefaultAdminFlow1" /> 

    <batch:flow id="wasp.job.DefaultAdminFlow1" parent="wasp.job.QuoteFlow" next="wasp.job.DefaultAdminFlow2" />

    <batch:split id="wasp.job.DefaultAdminFlow2" next="wasp.job.DefaultAdminFlow3" task-executor="asyncTaskExecutor">
      <batch:flow>
        <batch:flow id="wasp.job.DefaultAdminFlow2.PiApprovalFlow" parent="wasp.job.PiApprovalFlow" />
      </batch:flow>
      <batch:flow>
        <batch:flow id="wasp.job.DefaultAdminFlow2.DaApprovalFlow" parent="wasp.job.DaApprovalFlow" />
      </batch:flow>
    </batch:split> 

    <batch:flow id="wasp.job.DefaultAdminFlow3" parent="wasp.job.SendInvoiceFlow" />
  </batch:flow>

  <!-- *** FLOWS OF FLOWS *** -->

  <batch:job id="wasp.job.Job" restartable="true">
    <batch:flow id="wasp.job.Job0" parent="wasp.job.DefaultAdminFlow" next="wasp.job.Job1" />
    <batch:flow id="wasp.job.Job1" parent="wasp.default.WaitForChildrenFinalFlow" next="wasp.job.Job2" />

    <batch:flow id="wasp.job.Job2" parent="wasp.default.FinalFlow" />
  </batch:job>


  <!-- /default flow --> 
  <!-- ********************* -->

</beans>
