<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:int="http://www.springframework.org/schema/integration"
	xsi:schemaLocation="http://www.springframework.org/schema/integration http://www.springframework.org/schema/integration/spring-integration.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">


	<!-- priority channels -->
	<int:channel id="wasp.channel.priority.job">
		<int:priority-queue />
	</int:channel>
	
	<int:channel id="wasp.channel.priority.run">
		<int:priority-queue />
	</int:channel>
	
	<int:channel id="wasp.channel.priority.sample">
		<int:priority-queue />
	</int:channel>
	
	<int:channel id="wasp.channel.priority.library">
		<int:priority-queue />
	</int:channel>
	
	<int:channel id="wasp.channel.priority.analysis">
		<int:priority-queue />
	</int:channel>
	
	<int:channel id="wasp.channel.priority.default">
		<int:priority-queue />
	</int:channel>
	
	<int:channel id="wasp.channel.priority.file">
		<int:priority-queue />
	</int:channel>
	
	<int:channel id="wasp.channel.priority.waspStatusMessages">
		<int:priority-queue />
	</int:channel>
	
	
	<!-- other queue channels -->
	<int:channel id="wasp.channel.queue.launch">
		<int:queue />
	</int:channel>
	
	<int:channel id="wasp.channel.queue.batch">
		<int:queue />
	</int:channel>
	
	<int:channel id="wasp.channel.resend.waspStatusMessages">
		<int:queue />
	</int:channel>
	
	<int:channel id="wasp.channel.resend.waspStatusMessages.unfiltered" />
	
	<int:channel id="wasp.channel.throttled.launch" />	
	
	<int:channel id="wasp.channel.reply.unfiltered" />
	
	
	<!-- publish-subscribe channels for broadcasting messages -->	
	<int:publish-subscribe-channel id="wasp.channel.notification.batch" />
	
	<int:publish-subscribe-channel id="wasp.channel.notification.job" />
	
	<int:publish-subscribe-channel id="wasp.channel.notification.run" />
	
	<int:publish-subscribe-channel id="wasp.channel.notification.sample" />
	
	<int:publish-subscribe-channel id="wasp.channel.notification.library" />
	
	<int:publish-subscribe-channel id="wasp.channel.notification.analysis" />
	
	<int:publish-subscribe-channel id="wasp.channel.notification.default" />
	
	<int:publish-subscribe-channel id="wasp.channel.notification.file" />
	
	<int:publish-subscribe-channel id="wasp.channel.notification.abort" />
	
	
	
	<!-- bridges between priority and publish-subscribe channels -->
	
	<int:bridge id="wasp.channel.bridge.throttled.batch" input-channel="wasp.channel.queue.batch" output-channel="wasp.channel.notification.batch" >
		<!-- this delay allows time for a job to hibernate before handling a message that might wake it -->
		<int:poller max-messages-per-poll="1" fixed-delay="10" /> 
	</int:bridge>
	
	<int:bridge id="wasp.channel.bridge.resend.waspStatusMessages" input-channel="wasp.channel.resend.waspStatusMessages" output-channel="wasp.channel.priority.waspStatusMessages" >
		<!-- this delay allows time for a job to hibernate before handling a message that might wake it -->
		<int:poller max-messages-per-poll="1" fixed-delay="50" /> 
	</int:bridge>
	
	<!-- int:delayer id="wasp.channel.delayer.resend.waspStatusMessages" input-channel="wasp.channel.resend.waspStatusMessages" default-delay="50" output-channel="wasp.channel.priority.waspStatusMessages"/-->
	
	<!-- need to pass to a queue channel in case of backlog. wasp.channel.priority.waspStatusMessages will pick off messages from wasp.channel.notification.batch -->
	<int:bridge id="wasp.channel.bridge.notify" input-channel="wasp.channel.notification.batch" output-channel="wasp.channel.priority.waspStatusMessages" />
	
	<int:bridge id="wasp.channel.bridge.job" input-channel="wasp.channel.priority.job" output-channel="wasp.channel.notification.job" >
		<int:poller max-messages-per-poll="1" fixed-delay="10" />
	</int:bridge>
	
	<int:bridge id="wasp.channel.bridge.run" input-channel="wasp.channel.priority.run" output-channel="wasp.channel.notification.run">
		<int:poller max-messages-per-poll="1" fixed-delay="10" />
	</int:bridge>
	
	<int:bridge id="wasp.channel.bridge.sample"  input-channel="wasp.channel.priority.sample" output-channel="wasp.channel.notification.sample">
		<int:poller max-messages-per-poll="1" fixed-delay="10" />
	</int:bridge>
	
	<int:bridge id="wasp.channel.bridge.library"  input-channel="wasp.channel.priority.library" output-channel="wasp.channel.notification.library">
		<int:poller max-messages-per-poll="1" fixed-delay="10" />
	</int:bridge>
	
	<int:bridge id="wasp.channel.bridge.analysis"  input-channel="wasp.channel.priority.analysis" output-channel="wasp.channel.notification.analysis">
		<int:poller max-messages-per-poll="1" fixed-delay="10" />
	</int:bridge>
	
	<int:bridge id="wasp.channel.bridge.file"  input-channel="wasp.channel.priority.file" output-channel="wasp.channel.notification.file">
		<int:poller max-messages-per-poll="1" fixed-delay="10" />
	</int:bridge>
	
	<int:bridge id="wasp.channel.bridge.launch"  input-channel="wasp.channel.queue.launch" output-channel="wasp.channel.throttled.launch">
		<int:poller max-messages-per-poll="1" fixed-delay="100" />
	</int:bridge>
	
	<bean id="waspMessageType" class="edu.yu.einstein.wasp.integration.messages.WaspMessageType" />
	<bean id="waspTask" class="edu.yu.einstein.wasp.integration.messages.tasks.WaspTask" />
	
	<!-- channel for receiving messages intended for batch system.  -->
	<!-- messages can be routed here by injecting into internal or secure message gateway with header 'target' = 'batch' -->
	<int:channel id="wasp.channel.batch" >
		<int:interceptors>
	    	<int:wire-tap channel="wasp.channel.defaultLogging" />
	    </int:interceptors>
	</int:channel>
	
	
	
	<int:publish-subscribe-channel id="wasp.channel.notification.run.success" />
	
	<int:filter input-channel="wasp.channel.notification.run" output-channel="wasp.channel.notification.run.success" >
		<bean class="edu.yu.einstein.wasp.integration.endpoints.RunSuccessFilter" />
	</int:filter>
		
	<int:splitter input-channel="wasp.channel.notification.run.success" output-channel="wasp.channel.batch">
		<bean class="edu.yu.einstein.wasp.integration.endpoints.RunSuccessSplitter" />
	</int:splitter>
	
	<bean id="batchJobHibernationManager" class="edu.yu.einstein.wasp.integration.endpoints.BatchJobHibernationManager" />
	
	<int:service-activator input-channel="wasp.channel.priority.waspStatusMessages" 
		output-channel="wasp.channel.reply.unfiltered" ref="batchJobHibernationManager" method="handleStatusMessage"
		requires-reply="false" />
		
	<!-- header-router to sort inbound messages into appropriate channels -->
	<int:header-value-router id="waspMessageTypeRouter1" 
		header-name="#{waspMessageType.HEADER_KEY}" 
		input-channel="wasp.channel.batch" 
		default-output-channel="wasp.channel.queue.batch"
		resolution-required="false" >
		<int:mapping value="#{waspMessageType.LAUNCH_BATCH_JOB}" channel="wasp.channel.queue.launch"/>
	</int:header-value-router>
		
	
	<!-- header-router to sort inbound messages into appropriate channels -->
	<int:header-value-router id="waspMessageTypeRouter2" 
		header-name="#{waspMessageType.HEADER_KEY}" 
		input-channel="wasp.channel.notification.batch" 
		default-output-channel="wasp.channel.priority.default"
		resolution-required="false" >
		<int:mapping value="#{waspMessageType.JOB}" channel="wasp.channel.priority.job"/>
		<int:mapping value="#{waspMessageType.RUN}" channel="wasp.channel.priority.run"/>
		<int:mapping value="#{waspMessageType.SAMPLE}" channel="wasp.channel.priority.sample"/>
		<int:mapping value="#{waspMessageType.LIBRARY}" channel="wasp.channel.priority.library"/>
		<int:mapping value="#{waspMessageType.ANALYSIS}" channel="wasp.channel.priority.analysis"/>
		<int:mapping value="#{waspMessageType.FILE}" channel="wasp.channel.priority.file"/>
	</int:header-value-router>
		
	<!-- header-router to sort reply messages into appropriate channels -->
	<int:header-value-router id="waspMessageTypeRouterReply" 
		header-name="#{waspMessageType.HEADER_KEY}" 
		input-channel="wasp.channel.reply.unfiltered" 
		default-output-channel="wasp.channel.resend.waspStatusMessages.unfiltered"
		resolution-required="false" >
		<int:mapping value="#{waspMessageType.REPLY}" 
			channel="wasp.channel.reply"/>
	</int:header-value-router>
	
	<int:filter id="resendLimiter"
		input-channel="wasp.channel.resend.waspStatusMessages.unfiltered"
		output-channel="wasp.channel.resend.waspStatusMessages"
		throw-exception-on-rejection="false"
		expression="headers.get('#{T(edu.yu.einstein.wasp.integration.messages.templates.WaspMessageTemplate).RESEND}') lt #{T(edu.yu.einstein.wasp.integration.endpoints.BatchJobHibernationManager).RESEND_MESSAGE_MAX_TIMES}" />

	
	
</beans>
